package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.*;
import ast.E.*;
import ast.I.*;
import ast.T.*;
import alex.TokenValue;
import java.util.List;
import java.util.ArrayList;
import javafx.util.Pair;

scan with {: return getScanner().next_token(); :};

action code {:
   private AS as = new AS();
:};

parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};

//1) Lista de terminales y no terminales con sus tipos correspondientes

	//1.1) Terminales
terminal TokenValue IGUAL, COMA, PCOMA, PUNTO, MAS, MENOS, POR, DIV, MOD, AND, OR, NOT, 
 LT, GT, LE, GE, LA, LC, CA, CC, PA, PC, SL, IF, DO, ELEV, EQUAL, INT, THEN,
 TRUE, FALSE, ELSE, PROC, CONST, WHILE, SWITCH, RETURN, BOOLEAN, DEFAULT, CASE, STRUCT, NEW, PUNTERO, IDEN, ENT;


	//1.2) No terminales
non terminal Tipo TIPO, TIPO_BASICO, TIPO_PUNTERO, TIPO_ARRAY; //modificado para que contenga la información del tipo (FRANKY)

non terminal E E0, E1, E2, E3, E4, E5, E6, E7, E8, E9;

non terminal List<E> LIST_ARG, CON_ARG, ARG, LIST_VAL, INIT_LIST_VAL;

	//Su clase Param corresponde con un par de String (identificador) con su tipo, esto probablemente haya que cambiarlo (FRANKY)
non terminal List<Pair<Tipo, E>> LIST_TIPO_ARG, CON_TIPO_ARG, TIPO_ARG;

non terminal I INST, INST_IF,INST_WHILE, INST_SWITCH, INST_ASIG, INST_DECL, INST_STRUCT, INST_DECL_FUN, INST_CALL_PROC;

non terminal List<I> S, LIST_DECL;

non terminal Pair<E, List<I>> SINGLE_DEFAULT, SINGLE_CASE;

	//usada para el switch( Su tipo Case es una lista de pares donde aparece el identificador y sus instrucciones) (FRANKY)
non terminal List<Pair<E, List<I>>> LIST_CASE;


//2) Inicio
S   ::= INST:inst S:lista_inst
{:lista_inst.add(0,inst); RESULT = lista_inst;:};
S   ::= 
{:RESULT= new ArrayList<I>();:};


//3) Gramatica de Expresiones (ordenada respecto a la precedencia de los distintos operadores)

	//3.1) Operadores Logicos
E0  ::= E1:op1 OR:or E0:op2
{:RESULT=as.or(op1, op2, or.getFila(), or.getColumna());:};
E0  ::= E1:op1
{:RESULT=op1;:};

E1  ::= E2:op1 AND:and E1:op2
{:RESULT=as.and(op1, op2, and.getFila(), and.getColumna());:};
E1  ::= E2:op1
{:RESULT=op1;:};

	//3.2) Operadores comparativos
E2  ::= E3:op1 NOT:not IGUAL E3:op2
{:RESULT=as.notEqual(op1, op2, not.getFila(), not.getColumna());:};
E2  ::= E3:op1 GT:gt E3:op2
{:RESULT=as.greaterThan(op1, op2, gt.getFila(), gt.getColumna());:};
E2  ::= E3:op1 LT:lt E3:op2
{:RESULT=as.lessThan(op1, op2, lt.getFila(), lt.getColumna());:};
E2  ::= E3:op1 LE:le E3:op2
{:RESULT=as.lessEqual(op1, op2, le.getFila(), le.getColumna());:};
E2  ::= E3:op1 GE:ge E3:op2
{:RESULT=as.greaterEqual(op1, op2, ge.getFila(), ge.getColumna());:};
E2  ::= E3:op1 EQUAL:eq E3:op2
{:RESULT=as.equal(op1, op2, eq.getFila(), eq.getColumna());:};
E2  ::= E3:op1
{:RESULT=op1;:};

	//3.3) Operadores aritmeticos
		//3.3.1) Suma y Resta
E3  ::= E3:op1 MAS:mas E4:op2
{:RESULT=as.suma(op1, op2, mas.getFila(), mas.getColumna());:};
E3  ::= E3:op1 MENOS:menos E4:op2
{:RESULT=as.resta(op1, op2, menos.getFila(), menos.getColumna());:};
E3  ::= E4:op1
{:RESULT=op1;:};

		//3.3.2) Multiplicacion, Division y Modulo
E4  ::= E4:op1 POR:por E5:op2
{:RESULT=as.mul(op1, op2, por.getFila(), por.getColumna());:};
E4  ::= E4:op1 DIV:div E5:op2
{:RESULT=as.div(op1, op2, div.getFila(), div.getColumna());:};
E4  ::= E4:op1 MOD:mod E5:op2
{:RESULT = as.mod(op1, op2, mod.getFila(), mod.getColumna());:};
E4  ::= E5:op1
{:RESULT=op1;:};

		//3.3.3) Elevado
E5  ::= E5:op1 ELEV:elev E6:op2
{:RESULT=as.elev(op1, op2, elev.getFila(), elev.getColumna());:};
E5  ::= E6:op1
{:RESULT = op1;:};

	//3.4) Operador negacion
E6  ::= NOT:not E6:op1
{:RESULT=as.not(op1, not.getFila(), not.getColumna());:};
E6  ::= E7:op1
{:RESULT=op1;:};

	//3.5) Operadores corchete, punto, asterisco y new
E7  ::= E7:op1 CA:ca E0:op2 CC
{:RESULT=as.squareBracket(op1, op2, ca.getFila(), ca.getColumna());:};
E7  ::= E7:op1 PUNTO:dot E9:op2 
{:RESULT = as.dot(op1, op2, dot.getFila(), dot.getColumna());:}; //ESTO ALOMEJOR HAY QUE CAMBIARLO PARA QUE PASARLE UN OBJETO IDEN (FRANKY)
E7  ::= PUNTERO:puntero E9:op1
{:RESULT = as.dollar(op1, puntero.getFila(), puntero.getColumna());:};
E7	::= NEW:nnew TIPO:tipo CA E0:tam CC
{:RESULT = as.nnew(tipo, tam, nnew.getFila(), nnew.getColumna());:};
E7	::= NEW:nnew TIPO:tipo CA CC
{:RESULT = as.nnew(tipo, as.num("1", nnew.getFila(), nnew.getColumna()), nnew.getFila(), nnew.getColumna());:};
E7  ::= E8:op1
{:RESULT=op1;:};
	
	//3.6) Operador menos
E8  ::= MENOS:menos E9:op1
{:RESULT=as.menos(op1, menos.getFila(), menos.getColumna());:};
E8  ::= E9:op1
{:RESULT=op1;:};


	//3.7) Terminales y llamada a funcion como expresion
E9  ::= ENT:op1
{:RESULT=as.num(op1.getLexema(), op1.getFila(), op1.getColumna());:};
E9  ::= IDEN:op1
{:RESULT=as.iden(op1.getLexema(), op1.getFila(), op1.getColumna());:};
E9  ::= PA E0:op1 PC
{:RESULT=op1;:};
E9  ::= TRUE:tru
{:RESULT=as.basicTrue(tru.getFila(), tru.getColumna());:};
E9  ::= FALSE:fal
{:RESULT=as.basicFalse(fal.getFila(), fal.getColumna());:};
E9  ::= IDEN:id PA LIST_ARG:args PC:pc
{:RESULT=as.llamadaFuncion(as.iden(id.getLexema(), id.getFila(), id.getColumna()), args, pc.getFila(), pc.getColumna());:};

		//3.7.1) No terminales auxiliares para la llamada a funcion como expresion
//Sin argumentos
LIST_ARG ::= 
{:RESULT=new ArrayList<E>();:};

//Con argumentos
LIST_ARG ::= CON_ARG:op1
{:RESULT=op1;:};
CON_ARG  ::= E0:op1 ARG:op2
{:op2.add(0, op1); RESULT=op2;:};
ARG      ::= COMA E0:op1 ARG:op2
{:op2.add(0, op1); RESULT=op2;:};
ARG		 ::= 
{:RESULT=new ArrayList<E>();:};


//4) Gramatica de instrucciones

	//4.1) Todas las instrucciones posibles
INST ::= INST_IF:op1
{:RESULT = op1;:};
INST ::= INST_WHILE:op1
{:RESULT = op1;:};
INST ::= INST_SWITCH:op1
{:RESULT = op1;:};
INST ::= INST_ASIG:op1
{:RESULT = op1;:};
INST ::= INST_DECL:op1
{:RESULT = op1;:};
INST ::= INST_STRUCT:op1
{:RESULT = op1;:};
INST ::= INST_DECL_FUN:op1
{:RESULT = op1;:};
INST ::= INST_CALL_PROC:op1
{:RESULT = op1;:};

	//4.2) Instruccion If
INST_IF ::= IF:iff PA E0:condicion PC LA S:cuerpo LC
{:RESULT = as.instIf(condicion, cuerpo, null, iff.getFila(), iff.getColumna());:};
INST_IF ::= IF:iff PA E0:condicion PC LA S:cuerpo_if LC ELSE LA S:cuerpo_else LC
{:RESULT = as.instIf(condicion, cuerpo_if, cuerpo_else, iff.getFila(), iff.getColumna());:};

INST_IF ::= IF error LC
{:System.err.println("Error en la condicion del if\n");:};
INST_IF ::= IF E0 error LC
{:System.err.println("Error en el cuerpo del if o del else\n");:};


	//4.3) Instruccion while
INST_WHILE ::= WHILE:whilee PA E0:condicion PC LA S:cuerpo LC
{:RESULT = as.instWhile(condicion, cuerpo, whilee.getFila(), whilee.getColumna());:};

INST_WHILE ::= WHILE error LC
{:System.err.println("Error en la condicion del while\n");:};
INST_WHILE ::= WHILE E0 error LC
{:System.err.println("Error en el cuerpo del while\n");:};


	//4.4) Instruccion switch
INST_SWITCH ::= SWITCH:switchh PA IDEN:condicion PC LA LIST_CASE:list_cases LC
{:RESULT = as.instSwitch(as.iden(condicion.getLexema(), condicion.getFila(), condicion.getColumna()), list_cases, switchh.getFila(), switchh.getColumna());:};
		
INST_SWITCH ::= SWITCH error LC
{:System.err.println("Error en el selector del switch\n");:};

		//4.4.1) No terminales auxiliares para la instruccion switch
//Lista de Cases
LIST_CASE ::= 
{:List<Pair<E, List<I>>> cases = new ArrayList<Pair<E, List<I>>>(); RESULT = cases;:};
LIST_CASE ::= SINGLE_CASE:single_case LIST_CASE:cases
{:cases.add(0, single_case); RESULT = cases;:};
LIST_CASE ::= SINGLE_DEFAULT:defa
{:List<Pair<E, List<I>>> cases = new ArrayList<Pair<E, List<I>>>(); cases.add(defa); RESULT = cases;:};

//Un Case
SINGLE_CASE ::= CASE E0:selector LA S:cuerpo LC
{:RESULT = new Pair<E, List<I>>(selector, cuerpo);:};

SINGLE_CASE ::= CASE error LC
{:System.err.println("Error en la expresion del case del switch\n");:};
SINGLE_CASE ::= CASE E0 error LC
{:System.err.println("Error en el cuerpo del case del switch\n");:};


//Default
SINGLE_DEFAULT ::= DEFAULT LA S:cuerpo LC
{:RESULT = new Pair<E, List<I>>(null, cuerpo);:};

SINGLE_DEFAULT ::= DEFAULT error LC
{:System.err.println("Error en el cuerpo del default del switch\n");:};

	//4.5) Instruccion asignacion
INST_ASIG ::= E0:id IGUAL:igual E0:valor PCOMA
{:RESULT = as.instAsignacion(id, valor, igual.getFila(), igual.getColumna());:};

	//4.6) Instruccion declaracion
	
		//4.6.1) Declaracion sin inicializar
INST_DECL ::= TIPO:tipoBase IDEN:id TIPO_ARRAY:tipoArray PCOMA
{:Tipo tipoDeclaracion;
  if(tipoArray == null) tipoDeclaracion = tipoBase;
  else{
	  TipoArray t = (TipoArray) tipoArray;
	  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
	  t.setTipoBase(tipoBase);
	  tipoDeclaracion = tipoArray;
  }
  RESULT = as.instDeclaracion(false, tipoDeclaracion, as.iden(id.getLexema(), id.getFila(), id.getColumna()), null, id.getFila(), id.getColumna());
:};

		//4.6.2) Declaracion con valores inicializados
INST_DECL ::= TIPO:tipoBase IDEN:id TIPO_ARRAY:tipoArray IGUAL INIT_LIST_VAL:valor PCOMA
{:Tipo tipoDeclaracion;
  if(tipoArray == null) tipoDeclaracion = tipoBase;
  else{
	  TipoArray t = (TipoArray) tipoArray;
	  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
	  t.setTipoBase(tipoBase);
	  tipoDeclaracion = tipoArray;
  }
  RESULT = as.instDeclaracion(false, tipoDeclaracion, as.iden(id.getLexema(), id.getFila(), id.getColumna()), valor, id.getFila(), id.getColumna());
:};

		//4.6.3) Declaracion constante (inicializacion forzosa)
INST_DECL ::= CONST TIPO:tipoBase IDEN:id TIPO_ARRAY:tipoArray IGUAL INIT_LIST_VAL:valor PCOMA
{:Tipo tipoDeclaracion;
  if(tipoArray == null) tipoDeclaracion = tipoBase;
  else{
	  TipoArray t = (TipoArray) tipoArray;
	  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
	  t.setTipoBase(tipoBase);
	  tipoDeclaracion = tipoArray;
  }
  RESULT = as.instDeclaracion(true, tipoDeclaracion, as.iden(id.getLexema(), id.getFila(), id.getColumna()), valor, id.getFila(), id.getColumna());
:};

INST_DECL ::= TIPO error PCOMA
{:System.err.println("Error en la declaracion. Identificador erroneo\n");:};
INST_DECL ::= TIPO IDEN error PCOMA
{:System.err.println("Error la declaracion. Valor inicial erroneo\n");:};
INST_DECL ::= CONST TIPO error PCOMA
{:System.err.println("Error en la declaracion. Identificado erroneo\n");:};
INST_DECL ::= CONST TIPO IDEN error PCOMA
{:System.err.println("Error en la declaracion. Valor inicial erroneo\n");:};

	
		//4.6.4) No terminales auxiliares para la instruccion declaracion
//Lista de valores iniciales
INIT_LIST_VAL ::= E0:val
{: List<E> list = new ArrayList<E>(); list.add(0, val); RESULT = list; RESULT = list;:};
INIT_LIST_VAL   ::= LA LIST_VAL:list LC
{:RESULT = list;:};

LIST_VAL  ::= E0:val
{:List<E> list = new ArrayList<E>(); list.add(0, val); RESULT = list;:};
LIST_VAL  ::= E0:val COMA LIST_VAL:list
{:list.add(0, val); RESULT = list;:};


//Lista de tipos

//Tipos simples
TIPO ::= TIPO_BASICO:tipoBasico
{:RESULT = tipoBasico;:};

TIPO_BASICO ::= INT:tipoBasico
{:RESULT = new TipoInt();:};
TIPO_BASICO ::= BOOLEAN:tipoBasico
{:RESULT = new TipoBoolean();:};
TIPO_BASICO ::= IDEN:tipoPropio
{:RESULT = new TipoStruct(tipoPropio.getLexema(), tipoPropio.getFila(), tipoPropio.getColumna());:}; //REALMENTE NO? REVISAR (JC)

//Tipos punteros
TIPO ::= TIPO_BASICO:tipoBasico TIPO_PUNTERO:tipoPuntero
{:TipoPuntero t = (TipoPuntero) tipoPuntero;
  while(t.getTipoApuntado() != null) t = (TipoPuntero) t.getTipoApuntado();
  t.setTipoApuntado(tipoBasico);
  RESULT = tipoPuntero;
:};

TIPO_PUNTERO ::= PUNTERO:puntero
{:RESULT = new TipoPuntero(null, puntero.getFila(), puntero.getColumna());:};
TIPO_PUNTERO ::= PUNTERO:puntero TIPO_PUNTERO:tipoPuntero
{:RESULT = new TipoPuntero(tipoPuntero, puntero.getFila(), puntero.getColumna());:};

//Tipos Arrays
TIPO_ARRAY ::= 
{:RESULT = null;:};
TIPO_ARRAY ::= CA:ca E0:dimension CC TIPO_ARRAY:tipoArray
{:RESULT = new TipoArray(tipoArray, dimension, ca.getFila(), ca.getColumna());:};


	//4.7) Instruccion struct
INST_STRUCT ::= STRUCT:struct LA LIST_DECL:lista LC IDEN:nombre PCOMA
{:RESULT = as.instStruct(as.iden(nombre.getLexema(), nombre.getFila(), nombre.getColumna()), lista, struct.getFila(), struct.getColumna());:};

INST_STRUCT ::= STRUCT error PCOMA
{:System.err.println("Error en la declaracion del struct. Campo erroneo.\n");:};
INST_STRUCT ::= STRUCT LA LIST_DECL LC error PCOMA
{:System.err.println("Error en la declaracion del struct. Identificador erroneo.\n");:};

		
//No terminales auxiliares para la declaracion de struct: implementamos la lista de declaraciones
LIST_DECL ::= INST_DECL:decl LIST_DECL:lista
{:lista.add(0, decl); RESULT = lista;:};
LIST_DECL ::= 
{:RESULT = new ArrayList<I>();:};


	//4.8) Instruccion declaracion de funcion
//para diferenciar entre proc y fun necesitamos cambiar el tipo.
INST_DECL_FUN ::= TIPO:tipo IDEN:id PA LIST_TIPO_ARG:argumentos PC LA S:cuerpo RETURN E0:ret PCOMA LC
{:RESULT = as.instDeclFun(tipo, as.iden(id.getLexema(), id.getFila(), id.getColumna()), argumentos, cuerpo, ret, id.getFila(), id.getColumna());:};
INST_DECL_FUN ::= PROC IDEN:id PA LIST_TIPO_ARG:argumentos PC LA S:cuerpo LC
{:RESULT = as.instDeclFun(null, as.iden(id.getLexema(), id.getFila(), id.getColumna()), argumentos, cuerpo, null, id.getFila(), id.getColumna());:};

INST_DECL_FUN ::= TIPO error LC
{:System.err.println("Error en la declaracion de la funcion. Identificador erroneo\n");:};
INST_DECL_FUN ::= TIPO IDEN error LC
{:System.err.println("Error en la declaracion de la funcion. Parametros erroneos\n");:};
INST_DECL_FUN ::= TIPO IDEN PA LIST_TIPO_ARG PC error LC
{:System.err.println("Error en la declaracion de la funcion. Cuerpo erroneo\n");:};


//No terminales auxiliares para la instruccion de declaracion de funcion 
//Implementamos una lista de argumentos con sus respectivos tipos
LIST_TIPO_ARG ::= 
{:RESULT=new ArrayList<Pair<Tipo, E>>();:};
LIST_TIPO_ARG ::= CON_TIPO_ARG:argumentos
{:RESULT=argumentos;:};
CON_TIPO_ARG  ::= TIPO:tipoBase IDEN:nombreArgumento TIPO_ARRAY:tipoArray TIPO_ARG:argumentos
{:
  Tipo tipoArgumento;
  if(tipoArray == null) tipoArgumento = tipoBase;
  else{
	  TipoArray t = (TipoArray) tipoArray;
	  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
	  t.setTipoBase(tipoBase);
	  tipoArgumento = tipoArray;
  }
  argumentos.add(0, new Pair<Tipo, E>(tipoArgumento, as.iden(nombreArgumento.getLexema(), nombreArgumento.getFila(), nombreArgumento.getColumna()))); 
  RESULT=argumentos;
:};

TIPO_ARG      ::= COMA TIPO:tipoBase IDEN:nombreArgumento TIPO_ARRAY:tipoArray TIPO_ARG:argumentos
{:
  Tipo tipoArgumento;
  if(tipoArray == null) tipoArgumento = tipoBase;
  else{
	  TipoArray t = (TipoArray) tipoArray;
	  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
	  t.setTipoBase(tipoBase);
	  tipoArgumento = tipoArray;
  }
  argumentos.add(0, new Pair<Tipo, E>(tipoArgumento, as.iden(nombreArgumento.getLexema(), nombreArgumento.getFila(), nombreArgumento.getColumna()))); 
  RESULT=argumentos;
:};

TIPO_ARG	  ::= 
{:RESULT=new ArrayList<Pair<Tipo, E>>();:};

	//4.9) Instruccion llamada a procedimiento
INST_CALL_PROC ::= IDEN:id PA LIST_ARG:args PC PCOMA
{:RESULT = as.instCallProc(as.iden(id.getLexema(), id.getFila(), id.getColumna()), args, id.getFila(), id.getColumna());:};
