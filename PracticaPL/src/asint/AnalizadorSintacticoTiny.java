
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Apr 23 22:41:31 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.*;
import ast.E.*;
import ast.I.*;
import java.util.List;
import java.util.ArrayList;
import javafx.util.Pair;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Apr 23 22:41:31 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\037\004\000\002\002\004\000\002\037" +
    "\002\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\003\000\002\005\006\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\011\004\000\002\011\003\000\002" +
    "\012\006\000\002\012\005\000\002\012\003\000\002\013" +
    "\004\000\002\013\003\000\002\014\006\000\002\014\003" +
    "\000\002\014\003\000\002\014\005\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\002\000\002" +
    "\016\004\000\002\017\005\000\002\017\002\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\027\012\000\002\027\016\000\002" +
    "\030\012\000\002\031\011\000\002\041\006\000\002\042" +
    "\010\000\002\043\004\000\002\043\003\000\002\043\002" +
    "\000\002\032\006\000\002\033\006\000\002\033\010\000" +
    "\002\033\011\000\002\022\006\000\002\022\002\000\002" +
    "\021\003\000\002\021\005\000\002\020\005\000\002\020" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\034\010\000\002\040\004\000\002\040\002\000" +
    "\002\035\015\000\002\035\012\000\002\023\003\000\002" +
    "\023\002\000\002\024\005\000\002\025\006\000\002\025" +
    "\002\000\002\036\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\042\002\uffff\011\020\017\014\030\011\033" +
    "\015\037\012\041\017\042\034\044\026\045\005\046\025" +
    "\047\022\051\016\054\037\055\024\056\023\001\002\000" +
    "\046\002\uffd4\011\uffd4\017\uffd4\025\uffd4\030\uffd4\033\uffd4" +
    "\037\uffd4\041\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\054\uffd4\055\uffd4\056\uffd4\001\002" +
    "\000\010\037\012\051\016\055\125\001\002\000\004\055" +
    "\257\001\002\000\004\002\256\001\002\000\046\002\uffd3" +
    "\011\uffd3\017\uffd3\025\uffd3\030\uffd3\033\uffd3\037\uffd3\041" +
    "\uffd3\042\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\054\uffd3\055\uffd3\056\uffd3\001\002\000\020\011" +
    "\020\017\014\030\011\041\017\042\034\055\051\056\023" +
    "\001\002\000\020\011\uffbd\017\uffbd\030\uffbd\041\uffbd\042" +
    "\uffbd\055\uffbd\056\uffbd\001\002\000\046\002\uffd5\011\uffd5" +
    "\017\uffd5\025\uffd5\030\uffd5\033\uffd5\037\uffd5\041\uffd5\042" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\001\002\000\020\011\020\017" +
    "\014\030\011\041\017\042\034\055\051\056\023\001\002" +
    "\000\004\030\240\001\002\000\020\011\uffbc\017\uffbc\030" +
    "\uffbc\041\uffbc\042\uffbc\055\uffbc\056\uffbc\001\002\000\060" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\031" +
    "\uffdf\035\uffdf\036\uffdf\040\uffdf\001\002\000\014\030\011" +
    "\041\017\042\034\055\051\056\023\001\002\000\046\002" +
    "\uffd8\011\uffd8\017\uffd8\025\uffd8\030\uffd8\033\uffd8\037\uffd8" +
    "\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\054\uffd8\055\uffd8\056\uffd8\001\002\000\004" +
    "\030\214\001\002\000\060\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\031\uffe2\035\uffe2\036\uffe2\040\uffe2" +
    "\001\002\000\050\004\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\026\uffe1\030\210\035\uffe1\036" +
    "\uffe1\055\uffbb\001\002\000\004\030\201\001\002\000\004" +
    "\055\162\001\002\000\060\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\031\uffe4\035\uffe4\036\uffe4\040\uffe4" +
    "\001\002\000\046\002\uffd6\011\uffd6\017\uffd6\025\uffd6\030" +
    "\uffd6\033\uffd6\037\uffd6\041\uffd6\042\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\001\002\000\060\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\031\uffe6\035\uffe6\036\uffe6\040\uffe6\001" +
    "\002\000\046\002\uffd7\011\uffd7\017\uffd7\025\uffd7\030\uffd7" +
    "\033\uffd7\037\uffd7\041\uffd7\042\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\001\002\000\060\004\uffe9\005\uffe9\006\uffe9\007\155\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\026" +
    "\156\027\uffe9\031\uffe9\035\uffe9\036\uffe9\040\uffe9\001\002" +
    "\000\060\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027" +
    "\uffde\031\uffde\035\uffde\036\uffde\040\uffde\001\002\000\054" +
    "\004\uffeb\005\uffeb\006\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\025\uffeb\027\uffeb\031\uffeb\035\uffeb\036" +
    "\uffeb\040\uffeb\001\002\000\054\004\uffed\005\uffed\006\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\025\uffed" +
    "\027\uffed\031\uffed\035\110\036\uffed\040\uffed\001\002\000" +
    "\004\024\123\001\002\000\046\002\uffd1\011\uffd1\017\uffd1" +
    "\025\uffd1\030\uffd1\033\uffd1\037\uffd1\041\uffd1\042\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\001\002\000\052\004\ufff1\005\ufff1\006" +
    "\ufff1\010\ufff1\011\ufff1\012\106\013\105\014\104\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025" +
    "\ufff1\027\ufff1\031\ufff1\036\ufff1\040\ufff1\001\002\000\044" +
    "\004\ufff4\005\ufff4\006\ufff4\010\074\011\100\015\ufff4\016" +
    "\ufff4\017\075\020\072\021\073\022\077\023\101\025\ufff4" +
    "\027\ufff4\031\ufff4\036\076\040\ufff4\001\002\000\024\004" +
    "\ufffb\005\ufffb\006\ufffb\015\070\016\ufffb\025\ufffb\027\ufffb" +
    "\031\ufffb\040\ufffb\001\002\000\046\002\uffff\011\020\017" +
    "\014\025\uffff\030\011\033\015\037\012\041\017\042\034" +
    "\044\026\045\005\046\025\047\022\050\uffff\051\016\054" +
    "\037\055\024\056\023\001\002\000\022\004\ufffd\005\ufffd" +
    "\006\ufffd\016\065\025\ufffd\027\ufffd\031\ufffd\040\ufffd\001" +
    "\002\000\046\002\uffd2\011\uffd2\017\uffd2\025\uffd2\030\uffd2" +
    "\033\uffd2\037\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\001\002\000\004\004\050\001\002\000\020\011\020\017" +
    "\014\030\011\041\017\042\034\055\051\056\023\001\002" +
    "\000\062\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\054\031\uffe1\035\uffe1\036\uffe1\040\uffe1\001\002" +
    "\000\004\006\053\001\002\000\046\002\uffc7\011\uffc7\017" +
    "\uffc7\025\uffc7\030\uffc7\033\uffc7\037\uffc7\041\uffc7\042\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\001\002\000\022\011\020\017\014" +
    "\030\011\031\uffdc\041\017\042\034\055\051\056\023\001" +
    "\002\000\004\031\064\001\002\000\004\031\uffdd\001\002" +
    "\000\006\005\060\031\uffd9\001\002\000\020\011\020\017" +
    "\014\030\011\041\017\042\034\055\051\056\023\001\002" +
    "\000\004\031\uffdb\001\002\000\006\005\060\031\uffd9\001" +
    "\002\000\004\031\uffda\001\002\000\060\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3\035\uffe3\036" +
    "\uffe3\040\uffe3\001\002\000\020\011\020\017\014\030\011" +
    "\041\017\042\034\055\051\056\023\001\002\000\020\004" +
    "\ufffe\005\ufffe\006\ufffe\025\ufffe\027\ufffe\031\ufffe\040\ufffe" +
    "\001\002\000\010\002\001\025\001\050\001\001\002\000" +
    "\020\011\020\017\014\030\011\041\017\042\034\055\051" +
    "\056\023\001\002\000\022\004\ufffc\005\ufffc\006\ufffc\016" +
    "\ufffc\025\ufffc\027\ufffc\031\ufffc\040\ufffc\001\002\000\020" +
    "\011\020\017\014\030\011\041\017\042\034\055\051\056" +
    "\023\001\002\000\020\011\020\017\014\030\011\041\017" +
    "\042\034\055\051\056\023\001\002\000\020\011\020\017" +
    "\014\030\011\041\017\042\034\055\051\056\023\001\002" +
    "\000\004\004\116\001\002\000\020\011\020\017\014\030" +
    "\011\041\017\042\034\055\051\056\023\001\002\000\020" +
    "\011\020\017\014\030\011\041\017\042\034\055\051\056" +
    "\023\001\002\000\020\011\020\017\014\030\011\041\017" +
    "\042\034\055\051\056\023\001\002\000\020\011\020\017" +
    "\014\030\011\041\017\042\034\055\051\056\023\001\002" +
    "\000\030\004\ufff6\005\ufff6\006\ufff6\010\074\011\100\015" +
    "\ufff6\016\ufff6\025\ufff6\027\ufff6\031\ufff6\040\ufff6\001\002" +
    "\000\052\004\ufff2\005\ufff2\006\ufff2\010\ufff2\011\ufff2\012" +
    "\106\013\105\014\104\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\025\ufff2\027\ufff2\031\ufff2\036" +
    "\ufff2\040\ufff2\001\002\000\020\011\020\017\014\030\011" +
    "\041\017\042\034\055\051\056\023\001\002\000\020\011" +
    "\020\017\014\030\011\041\017\042\034\055\051\056\023" +
    "\001\002\000\020\011\020\017\014\030\011\041\017\042" +
    "\034\055\051\056\023\001\002\000\054\004\ufff0\005\ufff0" +
    "\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\025\ufff0\027\ufff0\031\ufff0\035\110\036\ufff0\040\ufff0\001" +
    "\002\000\020\011\020\017\014\030\011\041\017\042\034" +
    "\055\051\056\023\001\002\000\054\004\uffec\005\uffec\006" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\025" +
    "\uffec\027\uffec\031\uffec\035\uffec\036\uffec\040\uffec\001\002" +
    "\000\054\004\uffef\005\uffef\006\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\025\uffef\027\uffef\031\uffef\035" +
    "\110\036\uffef\040\uffef\001\002\000\054\004\uffee\005\uffee" +
    "\006\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\025\uffee\027\uffee\031\uffee\035\110\036\uffee\040\uffee\001" +
    "\002\000\030\004\ufff7\005\ufff7\006\ufff7\010\074\011\100" +
    "\015\ufff7\016\ufff7\025\ufff7\027\ufff7\031\ufff7\040\ufff7\001" +
    "\002\000\030\004\ufff5\005\ufff5\006\ufff5\010\074\011\100" +
    "\015\ufff5\016\ufff5\025\ufff5\027\ufff5\031\ufff5\040\ufff5\001" +
    "\002\000\020\011\020\017\014\030\011\041\017\042\034" +
    "\055\051\056\023\001\002\000\030\004\ufffa\005\ufffa\006" +
    "\ufffa\010\074\011\100\015\ufffa\016\ufffa\025\ufffa\027\ufffa" +
    "\031\ufffa\040\ufffa\001\002\000\052\004\ufff3\005\ufff3\006" +
    "\ufff3\010\ufff3\011\ufff3\012\106\013\105\014\104\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\025" +
    "\ufff3\027\ufff3\031\ufff3\036\ufff3\040\ufff3\001\002\000\030" +
    "\004\ufff9\005\ufff9\006\ufff9\010\074\011\100\015\ufff9\016" +
    "\ufff9\025\ufff9\027\ufff9\031\ufff9\040\ufff9\001\002\000\030" +
    "\004\ufff8\005\ufff8\006\ufff8\010\074\011\100\015\ufff8\016" +
    "\ufff8\025\ufff8\027\ufff8\031\ufff8\040\ufff8\001\002\000\014" +
    "\025\uffb8\037\012\045\005\051\016\055\125\001\002\000" +
    "\014\025\uffb8\037\012\045\005\051\016\055\125\001\002" +
    "\000\020\011\uffbb\017\uffbb\030\uffbb\041\uffbb\042\uffbb\055" +
    "\uffbb\056\uffbb\001\002\000\004\055\133\001\002\000\004" +
    "\025\130\001\002\000\004\055\131\001\002\000\004\006" +
    "\132\001\002\000\046\002\uffba\011\uffba\017\uffba\025\uffba" +
    "\030\uffba\033\uffba\037\uffba\041\uffba\042\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\054\uffba\055\uffba" +
    "\056\uffba\001\002\000\010\004\uffc2\006\uffc2\026\134\001" +
    "\002\000\004\056\151\001\002\000\006\004\136\006\137" +
    "\001\002\000\022\011\020\017\014\024\142\030\011\041" +
    "\017\042\034\055\051\056\023\001\002\000\046\002\uffc6" +
    "\011\uffc6\017\uffc6\025\uffc6\030\uffc6\033\uffc6\037\uffc6\041" +
    "\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000\004\006" +
    "\150\001\002\000\010\005\146\006\uffbe\025\uffbe\001\002" +
    "\000\020\011\020\017\014\030\011\041\017\042\034\055" +
    "\051\056\023\001\002\000\004\006\uffc1\001\002\000\004" +
    "\025\145\001\002\000\004\006\uffc0\001\002\000\020\011" +
    "\020\017\014\030\011\041\017\042\034\055\051\056\023" +
    "\001\002\000\006\006\uffbf\025\uffbf\001\002\000\046\002" +
    "\uffc5\011\uffc5\017\uffc5\025\uffc5\030\uffc5\033\uffc5\037\uffc5" +
    "\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\054\uffc5\055\uffc5\056\uffc5\001\002\000\004" +
    "\027\152\001\002\000\010\004\uffc2\006\uffc2\026\134\001" +
    "\002\000\006\004\uffc3\006\uffc3\001\002\000\004\025\uffb9" +
    "\001\002\000\014\030\011\041\017\042\034\055\051\056" +
    "\023\001\002\000\020\011\020\017\014\030\011\041\017" +
    "\042\034\055\051\056\023\001\002\000\004\027\160\001" +
    "\002\000\060\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\031\uffe8\035\uffe8\036\uffe8\040\uffe8\001\002\000" +
    "\060\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\031\uffe7\035\uffe7\036\uffe7\040\uffe7\001\002\000\004\030" +
    "\163\001\002\000\012\031\uffb4\037\012\051\016\055\125" +
    "\001\002\000\004\031\uffb5\001\002\000\020\011\020\017" +
    "\014\030\011\041\017\042\034\055\051\056\023\001\002" +
    "\000\004\031\167\001\002\000\004\024\170\001\002\000" +
    "\042\011\020\017\014\025\uffff\030\011\033\015\037\012" +
    "\041\017\042\034\044\026\045\005\046\025\047\022\051" +
    "\016\054\037\055\024\056\023\001\002\000\004\025\172" +
    "\001\002\000\046\002\uffb6\011\uffb6\017\uffb6\025\uffb6\030" +
    "\uffb6\033\uffb6\037\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\001\002\000\006\005\174\031\uffb1\001\002\000\010" +
    "\037\012\051\016\055\125\001\002\000\004\031\uffb3\001" +
    "\002\000\020\011\020\017\014\030\011\041\017\042\034" +
    "\055\051\056\023\001\002\000\006\005\174\031\uffb1\001" +
    "\002\000\004\031\uffb2\001\002\000\020\011\020\017\014" +
    "\030\011\041\017\042\034\055\051\056\023\001\002\000" +
    "\004\031\203\001\002\000\004\034\204\001\002\000\004" +
    "\024\205\001\002\000\042\011\020\017\014\025\uffff\030" +
    "\011\033\015\037\012\041\017\042\034\044\026\045\005" +
    "\046\025\047\022\051\016\054\037\055\024\056\023\001" +
    "\002\000\004\025\207\001\002\000\046\002\uffce\011\uffce" +
    "\017\uffce\025\uffce\030\uffce\033\uffce\037\uffce\041\uffce\042" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\054\uffce\055\uffce\056\uffce\001\002\000\022\011\020\017" +
    "\014\030\011\031\uffdc\041\017\042\034\055\051\056\023" +
    "\001\002\000\004\031\212\001\002\000\046\004\uffe3\006" +
    "\213\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\026\uffe3\035\uffe3\036\uffe3\001\002\000\046\002\uffb0" +
    "\011\uffb0\017\uffb0\025\uffb0\030\uffb0\033\uffb0\037\uffb0\041" +
    "\uffb0\042\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002\000\004\055" +
    "\215\001\002\000\004\031\216\001\002\000\004\024\217" +
    "\001\002\000\010\025\uffc8\052\220\053\224\001\002\000" +
    "\004\024\234\001\002\000\004\025\233\001\002\000\010" +
    "\025\uffc8\052\220\053\224\001\002\000\004\025\uffc9\001" +
    "\002\000\020\011\020\017\014\030\011\041\017\042\034" +
    "\055\051\056\023\001\002\000\004\040\226\001\002\000" +
    "\004\024\227\001\002\000\042\011\020\017\014\025\uffff" +
    "\030\011\033\015\037\012\041\017\042\034\044\026\045" +
    "\005\046\025\047\022\051\016\054\037\055\024\056\023" +
    "\001\002\000\004\025\231\001\002\000\010\025\uffcb\052" +
    "\uffcb\053\uffcb\001\002\000\004\025\uffca\001\002\000\046" +
    "\002\uffcd\011\uffcd\017\uffcd\025\uffcd\030\uffcd\033\uffcd\037" +
    "\uffcd\041\uffcd\042\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\054\uffcd\055\uffcd\056\uffcd\001\002\000" +
    "\042\011\020\017\014\025\uffff\030\011\033\015\037\012" +
    "\041\017\042\034\044\026\045\005\046\025\047\022\051" +
    "\016\054\037\055\024\056\023\001\002\000\004\025\236" +
    "\001\002\000\004\025\uffcc\001\002\000\060\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\035\uffe5" +
    "\036\uffe5\040\uffe5\001\002\000\020\011\020\017\014\030" +
    "\011\041\017\042\034\055\051\056\023\001\002\000\004" +
    "\031\242\001\002\000\004\040\243\001\002\000\004\024" +
    "\244\001\002\000\042\011\020\017\014\025\uffff\030\011" +
    "\033\015\037\012\041\017\042\034\044\026\045\005\046" +
    "\025\047\022\051\016\054\037\055\024\056\023\001\002" +
    "\000\004\025\246\001\002\000\050\002\uffd0\011\uffd0\017" +
    "\uffd0\025\uffd0\030\uffd0\033\uffd0\037\uffd0\041\uffd0\042\uffd0" +
    "\043\247\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002\000\004\024\250" +
    "\001\002\000\042\011\020\017\014\025\uffff\030\011\033" +
    "\015\037\012\041\017\042\034\044\026\045\005\046\025" +
    "\047\022\051\016\054\037\055\024\056\023\001\002\000" +
    "\004\025\252\001\002\000\046\002\uffcf\011\uffcf\017\uffcf" +
    "\025\uffcf\030\uffcf\033\uffcf\037\uffcf\041\uffcf\042\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\001\002\000\054\004\uffea\005\uffea\006" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\025" +
    "\uffea\027\uffea\031\uffea\035\uffea\036\uffea\040\uffea\001\002" +
    "\000\004\031\255\001\002\000\060\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0\035\uffe0\036\uffe0" +
    "\040\uffe0\001\002\000\004\002\000\001\002\000\012\004" +
    "\uffc2\006\uffc2\026\134\030\260\001\002\000\012\031\uffb4" +
    "\037\012\051\016\055\125\001\002\000\004\031\262\001" +
    "\002\000\004\024\263\001\002\000\042\011\020\017\014" +
    "\030\011\033\015\037\012\041\017\042\034\044\026\045" +
    "\005\046\025\047\022\050\uffff\051\016\054\037\055\024" +
    "\056\023\001\002\000\004\050\265\001\002\000\020\011" +
    "\020\017\014\030\011\041\017\042\034\055\051\056\023" +
    "\001\002\000\004\006\267\001\002\000\004\025\270\001" +
    "\002\000\046\002\uffb7\011\uffb7\017\uffb7\025\uffb7\030\uffb7" +
    "\033\uffb7\037\uffb7\041\uffb7\042\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\001\002\000\004\055\272\001\002\000\006\004\uffc2\026" +
    "\134\001\002\000\004\004\274\001\002\000\022\011\020" +
    "\017\014\024\142\030\011\041\017\042\034\055\051\056" +
    "\023\001\002\000\004\006\276\001\002\000\046\002\uffc4" +
    "\011\uffc4\017\uffc4\025\uffc4\030\uffc4\033\uffc4\037\uffc4\041" +
    "\uffc4\042\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\054\002\005\003\046\004\044\005\042\006" +
    "\041\007\040\010\035\011\034\012\032\013\030\014\026" +
    "\026\043\027\020\030\031\031\027\032\012\033\003\034" +
    "\007\035\045\036\037\037\006\001\001\000\002\001\001" +
    "\000\004\002\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\253\004\044\005\042" +
    "\006\041\007\040\010\035\011\034\012\032\013\030\014" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\252\012\032\013\030\014\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\002\005\003\046\004\044\005\042\006\041\007" +
    "\040\010\035\011\034\012\032\013\030\014\026\026\043" +
    "\027\020\030\031\031\027\032\012\033\003\034\007\035" +
    "\045\036\037\037\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\051\004\044\005" +
    "\042\006\041\007\040\010\035\011\034\012\032\013\030" +
    "\014\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\056\004\044\005\042\006\041" +
    "\007\040\010\035\011\034\012\032\013\030\014\026\015" +
    "\054\016\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\060\001\001\000\026\003\061\004\044\005" +
    "\042\006\041\007\040\010\035\011\034\012\032\013\030" +
    "\014\026\001\001\000\002\001\001\000\004\017\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\065" +
    "\004\044\005\042\006\041\007\040\010\035\011\034\012" +
    "\032\013\030\014\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\070\005\042\006\041\007\040\010" +
    "\035\011\034\012\032\013\030\014\026\001\001\000\002" +
    "\001\001\000\020\006\121\007\040\010\035\011\034\012" +
    "\032\013\030\014\026\001\001\000\020\006\120\007\040" +
    "\010\035\011\034\012\032\013\030\014\026\001\001\000" +
    "\016\007\117\010\035\011\034\012\032\013\030\014\026" +
    "\001\001\000\002\001\001\000\020\006\114\007\040\010" +
    "\035\011\034\012\032\013\030\014\026\001\001\000\020" +
    "\006\113\007\040\010\035\011\034\012\032\013\030\014" +
    "\026\001\001\000\016\007\102\010\035\011\034\012\032" +
    "\013\030\014\026\001\001\000\020\006\101\007\040\010" +
    "\035\011\034\012\032\013\030\014\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\112\011\034\012" +
    "\032\013\030\014\026\001\001\000\014\010\111\011\034" +
    "\012\032\013\030\014\026\001\001\000\014\010\106\011" +
    "\034\012\032\013\030\014\026\001\001\000\002\001\001" +
    "\000\012\011\110\012\032\013\030\014\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\116\007\040\010" +
    "\035\011\034\012\032\013\030\014\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\125\033\123\040\126\001\001\000\010" +
    "\002\125\033\123\040\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\140\004\044" +
    "\005\042\006\041\007\040\010\035\011\034\012\032\013" +
    "\030\014\026\020\142\021\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\140\004" +
    "\044\005\042\006\041\007\040\010\035\011\034\012\032" +
    "\013\030\014\026\020\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\140\004\044" +
    "\005\042\006\041\007\040\010\035\011\034\012\032\013" +
    "\030\014\026\020\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\160\001\001" +
    "\000\026\003\156\004\044\005\042\006\041\007\040\010" +
    "\035\011\034\012\032\013\030\014\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\164\023\165\024\163\001\001\000\002" +
    "\001\001\000\026\003\172\004\044\005\042\006\041\007" +
    "\040\010\035\011\034\012\032\013\030\014\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\002\005\003" +
    "\046\004\044\005\042\006\041\007\040\010\035\011\034" +
    "\012\032\013\030\014\026\026\043\027\020\030\031\031" +
    "\027\032\012\033\003\034\007\035\045\036\037\037\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\174\001\001\000\004\002\175\001\001\000\002\001\001" +
    "\000\026\003\176\004\044\005\042\006\041\007\040\010" +
    "\035\011\034\012\032\013\030\014\026\001\001\000\004" +
    "\025\177\001\001\000\002\001\001\000\026\003\201\004" +
    "\044\005\042\006\041\007\040\010\035\011\034\012\032" +
    "\013\030\014\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\002\005\003\046\004\044" +
    "\005\042\006\041\007\040\010\035\011\034\012\032\013" +
    "\030\014\026\026\043\027\020\030\031\031\027\032\012" +
    "\033\003\034\007\035\045\036\037\037\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\056\004\044" +
    "\005\042\006\041\007\040\010\035\011\034\012\032\013" +
    "\030\014\026\015\210\016\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\222\042\221" +
    "\043\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\041\222\042\221\043\231\001\001\000\002\001\001" +
    "\000\026\003\224\004\044\005\042\006\041\007\040\010" +
    "\035\011\034\012\032\013\030\014\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\002\005\003\046\004" +
    "\044\005\042\006\041\007\040\010\035\011\034\012\032" +
    "\013\030\014\026\026\043\027\020\030\031\031\027\032" +
    "\012\033\003\034\007\035\045\036\037\037\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\002\005\003\046\004\044\005\042" +
    "\006\041\007\040\010\035\011\034\012\032\013\030\014" +
    "\026\026\043\027\020\030\031\031\027\032\012\033\003" +
    "\034\007\035\045\036\037\037\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\240" +
    "\004\044\005\042\006\041\007\040\010\035\011\034\012" +
    "\032\013\030\014\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\002\005\003\046\004" +
    "\044\005\042\006\041\007\040\010\035\011\034\012\032" +
    "\013\030\014\026\026\043\027\020\030\031\031\027\032" +
    "\012\033\003\034\007\035\045\036\037\037\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\002\005\003\046\004\044\005\042\006\041\007\040" +
    "\010\035\011\034\012\032\013\030\014\026\026\043\027" +
    "\020\030\031\031\027\032\012\033\003\034\007\035\045" +
    "\036\037\037\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\134\001\001\000\010\002" +
    "\164\023\260\024\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\002\005\003\046\004\044\005\042\006" +
    "\041\007\040\010\035\011\034\012\032\013\030\014\026" +
    "\026\043\027\020\030\031\031\027\032\012\033\003\034" +
    "\007\035\045\036\037\037\263\001\001\000\002\001\001" +
    "\000\026\003\265\004\044\005\042\006\041\007\040\010" +
    "\035\011\034\012\032\013\030\014\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\272\001\001\000\002\001\001\000\032" +
    "\003\140\004\044\005\042\006\041\007\040\010\035\011" +
    "\034\012\032\013\030\014\026\020\142\021\274\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private AS as = new AS();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= INST S 
            {
              List<I> RESULT =null;
		I inst = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<I> lista_inst = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista_inst.add(0,inst); RESULT = lista_inst;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		List<I> start_val = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= 
            {
              List<I> RESULT =null;
		RESULT= new ArrayList<I>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E0 ::= E1 OR E0 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.or(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E0 ::= E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E1 ::= E2 AND E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.and(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E1 ::= E2 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E2 ::= E3 NOT IGUAL E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.notEqual(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E2 ::= E3 GT E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.greaterThan(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E2 ::= E3 LT E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.lessThan(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E2 ::= E3 LE E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.lessEqual(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E2 ::= E3 GE E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.greaterEqual(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E2 ::= E3 EQUAL E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.equal(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E2 ::= E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E3 ::= E3 MAS E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.suma(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E3 ::= E3 MENOS E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.resta(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E3 ::= E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E4 ::= E4 POR E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.mul(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E4 ::= E4 DIV E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.div(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E4 ::= E4 MOD E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mod(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E4 ::= E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E5 ::= E5 ELEV E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.elev(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E5 ::= E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E6 ::= NOT E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.not(op1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E6 ::= E7 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E7 ::= E7 CA E0 CC 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT=as.squareBracket(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E7 ::= E7 PUNTO E9 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.dot(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E7 ::= E8 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E8 ::= MENOS E9 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.menos(op1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E8 ::= E9 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E9 ::= IDEN PA LIST_ARG PC 
            {
              E RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> args = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT=as.llamadaFuncion(id,args);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E9 ::= ENT 
            {
              E RESULT =null;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.num(op1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E9 ::= IDEN 
            {
              E RESULT =null;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.iden(op1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E9 ::= PA E0 PC 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E9 ::= TRUE 
            {
              E RESULT =null;
		RESULT=as.basicTrue();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E9 ::= FALSE 
            {
              E RESULT =null;
		RESULT=as.basicFalse();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LIST_ARG ::= CON_ARG 
            {
              List<E> RESULT =null;
		List<E> op1 = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_ARG",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LIST_ARG ::= 
            {
              List<E> RESULT =null;
		RESULT=new ArrayList<E>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_ARG",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CON_ARG ::= E0 ARG 
            {
              List<E> RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<E> op2 = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		op2.add(0, op1); RESULT=op2;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CON_ARG",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARG ::= COMA E0 ARG 
            {
              List<E> RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<E> op2 = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		op2.add(0, op1); RESULT=op2;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARG",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARG ::= 
            {
              List<E> RESULT =null;
		RESULT=new ArrayList<E>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARG",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= INST_IF 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= INST_WHILE 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= INST_SWITCH 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= INST_ASIG 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= INST_DECL 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INST ::= INST_STRUCT 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INST ::= INST_DECL_FUN 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INST ::= INST_CALL_PROC 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INST_IF ::= IF PA E0 PC THEN LA S LC 
            {
              I RESULT =null;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instIf(condicion, cuerpo, null);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INST_IF ::= IF PA E0 PC THEN LA S LC ELSE LA S LC 
            {
              I RESULT =null;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		List<I> cuerpo_if = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<I> cuerpo_else = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instIf(condicion, cuerpo_if, cuerpo_else);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INST_WHILE ::= WHILE PA E0 PC DO LA S LC 
            {
              I RESULT =null;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instWhile(condicion, cuerpo);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INST_SWITCH ::= SWITCH PA IDEN PC LA LIST_CASE LC 
            {
              I RESULT =null;
		String condicion = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Pair<E,List<I>>> list_cases = (List<Pair<E,List<I>>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instSwitch(as.iden(condicion), list_cases);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_SWITCH",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SINGLE_DEFAULT ::= DEFAULT LA S LC 
            {
              Pair<E,List<I>> RESULT =null;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new Pair<E, List<I>>(null, cuerpo);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SINGLE_DEFAULT",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SINGLE_CASE ::= CASE E0 THEN LA S LC 
            {
              Pair<E,List<I>> RESULT =null;
		E selector = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new Pair<E, List<I>>(selector, cuerpo);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SINGLE_CASE",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LIST_CASE ::= SINGLE_CASE LIST_CASE 
            {
              List<Pair<E,List<I>>> RESULT =null;
		Pair<E,List<I>> single_case = (Pair<E,List<I>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Pair<E,List<I>>> cases = (List<Pair<E,List<I>>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		cases.add(0, single_case); RESULT = cases;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_CASE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LIST_CASE ::= SINGLE_DEFAULT 
            {
              List<Pair<E,List<I>>> RESULT =null;
		Pair<E,List<I>> defa = (Pair<E,List<I>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		List<Pair<E, List<I>>> cases = new ArrayList<Pair<E, List<I>>>(); cases.add(defa); RESULT = cases;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_CASE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LIST_CASE ::= 
            {
              List<Pair<E,List<I>>> RESULT =null;
		List<Pair<E, List<I>>> cases = new ArrayList<Pair<E, List<I>>>(); RESULT = cases;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_CASE",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INST_ASIG ::= E0 IGUAL E0 PCOMA 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valor = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instAsignacion(id, valor);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INST_DECL ::= TIPO IDEN INIT_LIST_DIM PCOMA 
            {
              I RESULT =null;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<E> tam = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instDeclaracion(false, tipo, as.iden(id), tam, null);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INST_DECL ::= TIPO IDEN INIT_LIST_DIM IGUAL INIT_LIST_VAL PCOMA 
            {
              I RESULT =null;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<E> tam = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> valor = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instDeclaracion(false, tipo, as.iden(id), tam, valor);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INST_DECL ::= CONST TIPO IDEN INIT_LIST_DIM IGUAL INIT_LIST_VAL PCOMA 
            {
              I RESULT =null;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<E> tam = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> valor = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instDeclaracion(true, tipo, as.iden(id), tam, valor);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INIT_LIST_DIM ::= CA ENT CC INIT_LIST_DIM 
            {
              List<E> RESULT =null;
		String tam = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<E> list = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, as.num(tam)); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INIT_LIST_DIM",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INIT_LIST_DIM ::= 
            {
              List<E> RESULT =null;
		List<E> list = new ArrayList<E>(); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INIT_LIST_DIM",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INIT_LIST_VAL ::= LIST_VAL 
            {
              List<E> RESULT =null;
		List<E> list = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INIT_LIST_VAL",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INIT_LIST_VAL ::= LA LIST_VAL LC 
            {
              List<E> RESULT =null;
		List<E> list = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INIT_LIST_VAL",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LIST_VAL ::= E0 COMA LIST_VAL 
            {
              List<E> RESULT =null;
		E val = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<E> list = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LIST_VAL ::= E0 
            {
              List<E> RESULT =null;
		E val = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		List<E> list = new ArrayList<E>(); list.add(0, val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= INT 
            {
              String RESULT =null;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = "int";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= BOOLEAN 
            {
              String RESULT =null;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = "boolean";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPO ::= IDEN 
            {
              String RESULT =null;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = tipo;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INST_STRUCT ::= STRUCT LA LIST_DECL LC IDEN PCOMA 
            {
              I RESULT =null;
		List<I> lista = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instStruct(as.iden(nombre), lista);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_STRUCT",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LIST_DECL ::= INST_DECL LIST_DECL 
            {
              List<I> RESULT =null;
		I decl = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<I> lista = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(0, decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_DECL",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LIST_DECL ::= 
            {
              List<I> RESULT =null;
		RESULT = new ArrayList<I>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_DECL",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INST_DECL_FUN ::= TIPO IDEN PA LIST_TIPO_ARG PC LA S RETURN E0 PCOMA LC 
            {
              I RESULT =null;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		List<Pair<String,E>> args = (List<Pair<String,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E ret = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = as.instDeclFun(tipo, as.iden(id), args, cuerpo, ret);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INST_DECL_FUN ::= PROC IDEN PA LIST_TIPO_ARG PC LA S LC 
            {
              I RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		List<Pair<String,E>> args = (List<Pair<String,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instDeclFun(null, as.iden(id), args, cuerpo, null);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LIST_TIPO_ARG ::= CON_TIPO_ARG 
            {
              List<Pair<String,E>> RESULT =null;
		List<Pair<String,E>> args = (List<Pair<String,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=args;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_TIPO_ARG",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LIST_TIPO_ARG ::= 
            {
              List<Pair<String,E>> RESULT =null;
		RESULT=new ArrayList<Pair<String, E>>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_TIPO_ARG",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CON_TIPO_ARG ::= TIPO E0 TIPO_ARG 
            {
              List<Pair<String,E>> RESULT =null;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E arg = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Pair<String,E>> args = (List<Pair<String,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		args.add(0, new Pair<String, E>(tipo, arg)); RESULT=args;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CON_TIPO_ARG",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO_ARG ::= COMA TIPO E0 TIPO_ARG 
            {
              List<Pair<String,E>> RESULT =null;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E arg = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Pair<String,E>> args = (List<Pair<String,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		args.add(0, new Pair<String, E>(tipo, arg)); RESULT=args;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARG",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO_ARG ::= 
            {
              List<Pair<String,E>> RESULT =null;
		RESULT=new ArrayList<Pair<String, E>>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARG",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INST_CALL_PROC ::= IDEN PA LIST_ARG PC PCOMA 
            {
              I RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<E> args = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = as.instCallProc(id, args);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL_PROC",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

