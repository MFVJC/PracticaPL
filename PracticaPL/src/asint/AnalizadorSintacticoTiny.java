
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Jun 15 19:44:46 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.*;
import ast.E.*;
import ast.I.*;
import ast.T.*;
import alex.TokenValue;
import java.util.List;
import java.util.ArrayList;
import javafx.util.Pair;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Jun 15 19:44:46 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\041\004\000\002\002\004\000\002\041" +
    "\002\000\002\006\005\000\002\006\003\000\002\007\005" +
    "\000\002\007\003\000\002\010\006\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\005\000" +
    "\002\013\003\000\002\014\004\000\002\014\003\000\002" +
    "\015\006\000\002\015\005\000\002\015\004\000\002\015" +
    "\007\000\002\015\006\000\002\015\003\000\002\016\004" +
    "\000\002\016\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\005\000\002\017\003\000\002\017\003\000\002" +
    "\017\006\000\002\020\002\000\002\020\003\000\002\021" +
    "\004\000\002\022\005\000\002\022\002\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\011\000\002\031\015\000\002\031" +
    "\005\000\002\031\006\000\002\032\011\000\002\032\005" +
    "\000\002\032\006\000\002\033\011\000\002\033\005\000" +
    "\002\045\002\000\002\045\004\000\002\045\003\000\002" +
    "\044\007\000\002\044\005\000\002\044\006\000\002\043" +
    "\006\000\002\043\005\000\002\034\006\000\002\034\004" +
    "\000\002\035\006\000\002\035\010\000\002\035\011\000" +
    "\002\035\005\000\002\035\006\000\002\035\006\000\002" +
    "\035\007\000\002\024\003\000\002\024\005\000\002\023" +
    "\003\000\002\023\005\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\002\004\000" +
    "\002\004\003\000\002\004\004\000\002\005\002\000\002" +
    "\005\006\000\002\036\010\000\002\036\005\000\002\036" +
    "\010\000\002\042\004\000\002\042\002\000\002\037\015" +
    "\000\002\037\012\000\002\037\005\000\002\037\006\000" +
    "\002\037\011\000\002\025\002\000\002\025\003\000\002" +
    "\026\006\000\002\027\007\000\002\027\002\000\002\040" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\050\002\uffff\003\022\011\023\017\014\030" +
    "\011\033\015\037\012\041\020\042\040\044\032\045\005" +
    "\046\031\047\025\051\016\054\043\055\021\056\024\057" +
    "\030\060\027\001\002\000\054\002\uffd1\003\uffd1\011\uffd1" +
    "\017\uffd1\025\uffd1\030\uffd1\033\uffd1\037\uffd1\041\uffd1\042" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\001\002\000" +
    "\010\037\012\051\016\057\132\001\002\000\006\003\326" +
    "\057\327\001\002\000\004\002\325\001\002\000\054\002" +
    "\uffd0\003\uffd0\011\uffd0\017\uffd0\025\uffd0\030\uffd0\033\uffd0" +
    "\037\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\001\002\000\024\011\023\017\014\030\011\041" +
    "\020\042\040\055\021\056\024\057\055\060\027\001\002" +
    "\000\012\003\uffae\026\uffae\056\uffae\057\uffae\001\002\000" +
    "\054\002\uffd2\003\uffd2\011\uffd2\017\uffd2\025\uffd2\030\uffd2" +
    "\033\uffd2\037\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\001\002\000\024\011\023\017\014\030" +
    "\011\041\020\042\040\055\021\056\024\057\055\060\027" +
    "\001\002\000\026\003\304\011\023\017\014\030\305\041" +
    "\020\042\040\055\021\056\024\057\055\060\027\001\002" +
    "\000\012\003\uffad\026\uffad\056\uffad\057\uffad\001\002\000" +
    "\012\003\uffaf\026\uffaf\056\300\057\uffaf\001\002\000\062" +
    "\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\031\uffdd\035\uffdd\036\uffdd\001\002\000\010" +
    "\037\012\051\016\057\132\001\002\000\004\006\272\001" +
    "\002\000\014\030\011\041\020\042\040\057\055\060\027" +
    "\001\002\000\014\030\011\041\020\042\040\057\055\060" +
    "\027\001\002\000\006\003\236\030\237\001\002\000\054" +
    "\002\uffd5\003\uffd5\011\uffd5\017\uffd5\025\uffd5\030\uffd5\033" +
    "\uffd5\037\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\001\002\000\062\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0\035" +
    "\uffe0\036\uffe0\001\002\000\054\003\uffac\004\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\026\uffdf" +
    "\030\232\035\uffdf\036\uffdf\056\uffac\057\uffac\001\002\000" +
    "\026\003\220\011\023\017\014\030\221\041\020\042\040" +
    "\055\021\056\024\057\055\060\027\001\002\000\004\057" +
    "\176\001\002\000\062\003\uffe1\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1\035\uffe1\036" +
    "\uffe1\001\002\000\054\002\uffd3\003\uffd3\011\uffd3\017\uffd3" +
    "\025\uffd3\030\uffd3\033\uffd3\037\uffd3\041\uffd3\042\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\001\002\000\062\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\031\uffe3\035\uffe3\036\uffe3\001\002\000\054\002" +
    "\uffd4\003\uffd4\011\uffd4\017\uffd4\025\uffd4\030\uffd4\033\uffd4" +
    "\037\uffd4\041\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\001\002\000\062\003\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\171\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\172\027\uffe9\031\uffe9\035\uffe9" +
    "\036\uffe9\001\002\000\062\003\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc\035\uffdc" +
    "\036\uffdc\001\002\000\056\003\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\027\uffeb\031\uffeb\035\uffeb\036\uffeb\001\002" +
    "\000\056\003\uffed\004\uffed\005\uffed\006\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\027" +
    "\uffed\031\uffed\035\114\036\uffed\001\002\000\006\003\127" +
    "\024\130\001\002\000\054\002\uffce\003\uffce\011\uffce\017" +
    "\uffce\025\uffce\030\uffce\033\uffce\037\uffce\041\uffce\042\uffce" +
    "\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\054" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\001\002\000\054" +
    "\003\ufff1\004\ufff1\005\ufff1\006\ufff1\010\ufff1\011\ufff1\012" +
    "\112\013\111\014\110\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\027\ufff1\031" +
    "\ufff1\036\ufff1\001\002\000\046\003\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\010\100\011\104\015\ufff4\016\ufff4\017\101\020" +
    "\076\021\077\022\103\023\105\024\ufff4\025\ufff4\027\ufff4" +
    "\031\ufff4\036\102\001\002\000\026\003\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\015\074\016\ufffb\024\ufffb\025\ufffb\027\ufffb" +
    "\031\ufffb\001\002\000\054\002\uffff\003\022\011\023\017" +
    "\014\025\uffff\030\011\033\015\037\012\041\020\042\040" +
    "\044\032\045\005\046\031\047\025\050\uffff\051\016\054" +
    "\043\055\021\056\024\057\030\060\027\001\002\000\024" +
    "\003\ufffd\004\ufffd\005\ufffd\006\ufffd\016\071\024\ufffd\025" +
    "\ufffd\027\ufffd\031\ufffd\001\002\000\054\002\uffcf\003\uffcf" +
    "\011\uffcf\017\uffcf\025\uffcf\030\uffcf\033\uffcf\037\uffcf\041" +
    "\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\001" +
    "\002\000\004\004\054\001\002\000\024\011\023\017\014" +
    "\030\011\041\020\042\040\055\021\056\024\057\055\060" +
    "\027\001\002\000\064\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\060\031\uffdf\035" +
    "\uffdf\036\uffdf\001\002\000\004\006\057\001\002\000\054" +
    "\002\uffbc\003\uffbc\011\uffbc\017\uffbc\025\uffbc\030\uffbc\033" +
    "\uffbc\037\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\001\002\000\026\011\023\017\014\030\011" +
    "\031\uffda\041\020\042\040\055\021\056\024\057\055\060" +
    "\027\001\002\000\004\031\070\001\002\000\004\031\uffd9" +
    "\001\002\000\006\005\064\031\uffd6\001\002\000\024\011" +
    "\023\017\014\030\011\041\020\042\040\055\021\056\024" +
    "\057\055\060\027\001\002\000\004\031\uffd8\001\002\000" +
    "\006\005\064\031\uffd6\001\002\000\004\031\uffd7\001\002" +
    "\000\062\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\031\uffdb\035\uffdb\036\uffdb\001\002" +
    "\000\024\011\023\017\014\030\011\041\020\042\040\055" +
    "\021\056\024\057\055\060\027\001\002\000\022\003\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\024\ufffe\025\ufffe\027\ufffe\031" +
    "\ufffe\001\002\000\010\002\001\025\001\050\001\001\002" +
    "\000\024\011\023\017\014\030\011\041\020\042\040\055" +
    "\021\056\024\057\055\060\027\001\002\000\024\003\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\016\ufffc\024\ufffc\025\ufffc\027" +
    "\ufffc\031\ufffc\001\002\000\024\011\023\017\014\030\011" +
    "\041\020\042\040\055\021\056\024\057\055\060\027\001" +
    "\002\000\024\011\023\017\014\030\011\041\020\042\040" +
    "\055\021\056\024\057\055\060\027\001\002\000\024\011" +
    "\023\017\014\030\011\041\020\042\040\055\021\056\024" +
    "\057\055\060\027\001\002\000\004\004\122\001\002\000" +
    "\024\011\023\017\014\030\011\041\020\042\040\055\021" +
    "\056\024\057\055\060\027\001\002\000\024\011\023\017" +
    "\014\030\011\041\020\042\040\055\021\056\024\057\055" +
    "\060\027\001\002\000\024\011\023\017\014\030\011\041" +
    "\020\042\040\055\021\056\024\057\055\060\027\001\002" +
    "\000\024\011\023\017\014\030\011\041\020\042\040\055" +
    "\021\056\024\057\055\060\027\001\002\000\032\003\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\010\100\011\104\015\ufff6\016" +
    "\ufff6\024\ufff6\025\ufff6\027\ufff6\031\ufff6\001\002\000\054" +
    "\003\ufff2\004\ufff2\005\ufff2\006\ufff2\010\ufff2\011\ufff2\012" +
    "\112\013\111\014\110\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\027\ufff2\031" +
    "\ufff2\036\ufff2\001\002\000\024\011\023\017\014\030\011" +
    "\041\020\042\040\055\021\056\024\057\055\060\027\001" +
    "\002\000\024\011\023\017\014\030\011\041\020\042\040" +
    "\055\021\056\024\057\055\060\027\001\002\000\024\011" +
    "\023\017\014\030\011\041\020\042\040\055\021\056\024" +
    "\057\055\060\027\001\002\000\056\003\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\027\ufff0\031\ufff0\035\114\036\ufff0" +
    "\001\002\000\024\011\023\017\014\030\011\041\020\042" +
    "\040\055\021\056\024\057\055\060\027\001\002\000\056" +
    "\003\uffec\004\uffec\005\uffec\006\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\027\uffec\031" +
    "\uffec\035\uffec\036\uffec\001\002\000\056\003\uffef\004\uffef" +
    "\005\uffef\006\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\027\uffef\031\uffef\035\114\036" +
    "\uffef\001\002\000\056\003\uffee\004\uffee\005\uffee\006\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\027\uffee\031\uffee\035\114\036\uffee\001\002\000" +
    "\032\003\ufff7\004\ufff7\005\ufff7\006\ufff7\010\100\011\104" +
    "\015\ufff7\016\ufff7\024\ufff7\025\ufff7\027\ufff7\031\ufff7\001" +
    "\002\000\032\003\ufff5\004\ufff5\005\ufff5\006\ufff5\010\100" +
    "\011\104\015\ufff5\016\ufff5\024\ufff5\025\ufff5\027\ufff5\031" +
    "\ufff5\001\002\000\024\011\023\017\014\030\011\041\020" +
    "\042\040\055\021\056\024\057\055\060\027\001\002\000" +
    "\032\003\ufffa\004\ufffa\005\ufffa\006\ufffa\010\100\011\104" +
    "\015\ufffa\016\ufffa\024\ufffa\025\ufffa\027\ufffa\031\ufffa\001" +
    "\002\000\054\003\ufff3\004\ufff3\005\ufff3\006\ufff3\010\ufff3" +
    "\011\ufff3\012\112\013\111\014\110\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\031\ufff3\036\ufff3\001\002\000\032\003\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\010\100\011\104\015\ufff9\016\ufff9" +
    "\024\ufff9\025\ufff9\027\ufff9\031\ufff9\001\002\000\032\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\010\100\011\104\015\ufff8" +
    "\016\ufff8\024\ufff8\025\ufff8\027\ufff8\031\ufff8\001\002\000" +
    "\004\006\170\001\002\000\014\025\uffa2\037\012\045\005" +
    "\051\016\057\132\001\002\000\014\025\uffa2\037\012\045" +
    "\005\051\016\057\132\001\002\000\012\003\uffac\026\uffac" +
    "\056\uffac\057\uffac\001\002\000\006\003\142\057\143\001" +
    "\002\000\004\025\135\001\002\000\006\003\136\057\137" +
    "\001\002\000\004\006\141\001\002\000\004\006\140\001" +
    "\002\000\054\002\uffa6\003\uffa6\011\uffa6\017\uffa6\025\uffa6" +
    "\030\uffa6\033\uffa6\037\uffa6\041\uffa6\042\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\001\002\000\054\002\uffa4\003" +
    "\uffa4\011\uffa4\017\uffa4\025\uffa4\030\uffa4\033\uffa4\037\uffa4" +
    "\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4" +
    "\001\002\000\004\006\166\001\002\000\012\003\145\004" +
    "\uffa8\006\uffa8\026\144\001\002\000\024\011\023\017\014" +
    "\030\011\041\020\042\040\055\021\056\024\057\055\060" +
    "\027\001\002\000\004\006\162\001\002\000\006\004\147" +
    "\006\150\001\002\000\026\011\023\017\014\024\153\030" +
    "\011\041\020\042\040\055\021\056\024\057\055\060\027" +
    "\001\002\000\054\002\uffba\003\uffba\011\uffba\017\uffba\025" +
    "\uffba\030\uffba\033\uffba\037\uffba\041\uffba\042\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\001\002\000\004\006\161" +
    "\001\002\000\004\006\uffb3\001\002\000\024\011\023\017" +
    "\014\030\011\041\020\042\040\055\021\056\024\057\055" +
    "\060\027\001\002\000\006\005\157\025\uffb1\001\002\000" +
    "\004\025\156\001\002\000\004\006\uffb2\001\002\000\024" +
    "\011\023\017\014\030\011\041\020\042\040\055\021\056" +
    "\024\057\055\060\027\001\002\000\004\025\uffb0\001\002" +
    "\000\054\002\uffb9\003\uffb9\011\uffb9\017\uffb9\025\uffb9\030" +
    "\uffb9\033\uffb9\037\uffb9\041\uffb9\042\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\001\002\000\054\002\uffb6\003\uffb6" +
    "\011\uffb6\017\uffb6\025\uffb6\030\uffb6\033\uffb6\037\uffb6\041" +
    "\uffb6\042\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\001" +
    "\002\000\004\027\164\001\002\000\014\004\uffa8\005\uffa8" +
    "\006\uffa8\026\144\031\uffa8\001\002\000\012\004\uffa7\005" +
    "\uffa7\006\uffa7\031\uffa7\001\002\000\054\002\uffb7\003\uffb7" +
    "\011\uffb7\017\uffb7\025\uffb7\030\uffb7\033\uffb7\037\uffb7\041" +
    "\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\001" +
    "\002\000\004\025\uffa3\001\002\000\054\002\uffa5\003\uffa5" +
    "\011\uffa5\017\uffa5\025\uffa5\030\uffa5\033\uffa5\037\uffa5\041" +
    "\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\001" +
    "\002\000\014\030\011\041\020\042\040\057\055\060\027" +
    "\001\002\000\024\011\023\017\014\030\011\041\020\042" +
    "\040\055\021\056\024\057\055\060\027\001\002\000\004" +
    "\027\174\001\002\000\062\003\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\035\uffe8" +
    "\036\uffe8\001\002\000\062\003\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7\035\uffe7" +
    "\036\uffe7\001\002\000\004\030\177\001\002\000\012\031" +
    "\uff9c\037\012\051\016\057\132\001\002\000\004\031\uff9b" +
    "\001\002\000\004\057\207\001\002\000\004\031\203\001" +
    "\002\000\004\024\204\001\002\000\050\003\022\011\023" +
    "\017\014\025\uffff\030\011\033\015\037\012\041\020\042" +
    "\040\044\032\045\005\046\031\047\025\051\016\054\043" +
    "\055\021\056\024\057\030\060\027\001\002\000\004\025" +
    "\206\001\002\000\054\002\uffa0\003\uffa0\011\uffa0\017\uffa0" +
    "\025\uffa0\030\uffa0\033\uffa0\037\uffa0\041\uffa0\042\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\001\002\000\010\005" +
    "\uffa8\026\144\031\uffa8\001\002\000\006\005\211\031\uff98" +
    "\001\002\000\010\037\012\051\016\057\132\001\002\000" +
    "\004\031\uff9a\001\002\000\004\057\214\001\002\000\010" +
    "\005\uffa8\026\144\031\uffa8\001\002\000\006\005\211\031" +
    "\uff98\001\002\000\004\031\uff99\001\002\000\004\003\230" +
    "\001\002\000\004\025\227\001\002\000\024\011\023\017" +
    "\014\030\011\041\020\042\040\055\021\056\024\057\055" +
    "\060\027\001\002\000\004\031\223\001\002\000\046\003" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\224\026\uffde\035\uffde\036\uffde\001\002\000\050" +
    "\003\022\011\023\017\014\025\uffff\030\011\033\015\037" +
    "\012\041\020\042\040\044\032\045\005\046\031\047\025" +
    "\051\016\054\043\055\021\056\024\057\030\060\027\001" +
    "\002\000\004\025\226\001\002\000\054\002\uffc9\003\uffc9" +
    "\011\uffc9\017\uffc9\025\uffc9\030\uffc9\033\uffc9\037\uffc9\041" +
    "\uffc9\042\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\001" +
    "\002\000\054\002\uffc8\003\uffc8\011\uffc8\017\uffc8\025\uffc8" +
    "\030\uffc8\033\uffc8\037\uffc8\041\uffc8\042\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\001\002\000\004\025\231\001" +
    "\002\000\054\002\uffc7\003\uffc7\011\uffc7\017\uffc7\025\uffc7" +
    "\030\uffc7\033\uffc7\037\uffc7\041\uffc7\042\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\001\002\000\026\011\023\017" +
    "\014\030\011\031\uffda\041\020\042\040\055\021\056\024" +
    "\057\055\060\027\001\002\000\004\031\234\001\002\000" +
    "\046\004\uffdb\006\235\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\026\uffdb\035\uffdb\036\uffdb\001\002" +
    "\000\054\002\uff97\003\uff97\011\uff97\017\uff97\025\uff97\030" +
    "\uff97\033\uff97\037\uff97\041\uff97\042\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\054\uff97\055\uff97\056" +
    "\uff97\057\uff97\060\uff97\001\002\000\004\025\267\001\002" +
    "\000\004\057\240\001\002\000\004\031\241\001\002\000" +
    "\004\024\242\001\002\000\010\025\uffc4\052\243\053\247" +
    "\001\002\000\006\003\262\024\263\001\002\000\004\025" +
    "\261\001\002\000\010\025\uffc4\052\243\053\247\001\002" +
    "\000\004\025\uffc2\001\002\000\026\003\251\011\023\017" +
    "\014\030\011\041\020\042\040\055\021\056\024\057\055" +
    "\060\027\001\002\000\006\003\253\024\254\001\002\000" +
    "\004\025\252\001\002\000\010\025\uffc0\052\uffc0\053\uffc0" +
    "\001\002\000\004\025\257\001\002\000\050\003\022\011" +
    "\023\017\014\025\uffff\030\011\033\015\037\012\041\020" +
    "\042\040\044\032\045\005\046\031\047\025\051\016\054" +
    "\043\055\021\056\024\057\030\060\027\001\002\000\004" +
    "\025\256\001\002\000\010\025\uffc1\052\uffc1\053\uffc1\001" +
    "\002\000\010\025\uffbf\052\uffbf\053\uffbf\001\002\000\004" +
    "\025\uffc3\001\002\000\054\002\uffc6\003\uffc6\011\uffc6\017" +
    "\uffc6\025\uffc6\030\uffc6\033\uffc6\037\uffc6\041\uffc6\042\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\001\002\000\004" +
    "\025\266\001\002\000\050\003\022\011\023\017\014\025" +
    "\uffff\030\011\033\015\037\012\041\020\042\040\044\032" +
    "\045\005\046\031\047\025\051\016\054\043\055\021\056" +
    "\024\057\030\060\027\001\002\000\004\025\265\001\002" +
    "\000\004\025\uffbe\001\002\000\004\025\uffbd\001\002\000" +
    "\054\002\uffc5\003\uffc5\011\uffc5\017\uffc5\025\uffc5\030\uffc5" +
    "\033\uffc5\037\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\001\002\000\062\003\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\031\uffe6" +
    "\035\uffe6\036\uffe6\001\002\000\062\003\uffe2\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2" +
    "\035\uffe2\036\uffe2\001\002\000\054\002\uffbb\003\uffbb\011" +
    "\uffbb\017\uffbb\025\uffbb\030\uffbb\033\uffbb\037\uffbb\041\uffbb" +
    "\042\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\001\002" +
    "\000\004\026\274\001\002\000\026\011\023\017\014\027" +
    "\275\030\011\041\020\042\040\055\021\056\024\057\055" +
    "\060\027\001\002\000\062\003\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4\035\uffe4" +
    "\036\uffe4\001\002\000\004\027\277\001\002\000\062\003" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\031\uffe5\035\uffe5\036\uffe5\001\002\000\012\003" +
    "\uffaa\026\uffaa\056\300\057\uffaa\001\002\000\010\003\uffab" +
    "\026\uffab\057\uffab\001\002\000\010\003\uffa9\026\uffa9\057" +
    "\uffa9\001\002\000\004\003\320\001\002\000\004\025\317" +
    "\001\002\000\024\011\023\017\014\030\011\041\020\042" +
    "\040\055\021\056\024\057\055\060\027\001\002\000\004" +
    "\031\307\001\002\000\046\003\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\310\026\uffde\035" +
    "\uffde\036\uffde\001\002\000\050\003\022\011\023\017\014" +
    "\025\uffff\030\011\033\015\037\012\041\020\042\040\044" +
    "\032\045\005\046\031\047\025\051\016\054\043\055\021" +
    "\056\024\057\030\060\027\001\002\000\004\025\312\001" +
    "\002\000\056\002\uffcd\003\uffcd\011\uffcd\017\uffcd\025\uffcd" +
    "\030\uffcd\033\uffcd\037\uffcd\041\uffcd\042\uffcd\043\313\044" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\001\002\000\004\024" +
    "\314\001\002\000\050\003\022\011\023\017\014\025\uffff" +
    "\030\011\033\015\037\012\041\020\042\040\044\032\045" +
    "\005\046\031\047\025\051\016\054\043\055\021\056\024" +
    "\057\030\060\027\001\002\000\004\025\316\001\002\000" +
    "\054\002\uffcc\003\uffcc\011\uffcc\017\uffcc\025\uffcc\030\uffcc" +
    "\033\uffcc\037\uffcc\041\uffcc\042\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\001\002\000\054\002\uffcb\003\uffcb\011" +
    "\uffcb\017\uffcb\025\uffcb\030\uffcb\033\uffcb\037\uffcb\041\uffcb" +
    "\042\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\001\002" +
    "\000\004\025\321\001\002\000\054\002\uffca\003\uffca\011" +
    "\uffca\017\uffca\025\uffca\030\uffca\033\uffca\037\uffca\041\uffca" +
    "\042\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\001\002" +
    "\000\056\003\uffea\004\uffea\005\uffea\006\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\027" +
    "\uffea\031\uffea\035\uffea\036\uffea\001\002\000\004\031\324" +
    "\001\002\000\062\003\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\031\uffde\035\uffde\036\uffde" +
    "\001\002\000\004\002\000\001\002\000\006\006\166\025" +
    "\345\001\002\000\014\003\330\004\uffa8\006\uffa8\026\144" +
    "\030\331\001\002\000\006\006\162\025\344\001\002\000" +
    "\012\031\uff9c\037\012\051\016\057\132\001\002\000\004" +
    "\031\333\001\002\000\006\003\334\024\335\001\002\000" +
    "\004\025\343\001\002\000\050\003\022\011\023\017\014" +
    "\030\011\033\015\037\012\041\020\042\040\044\032\045" +
    "\005\046\031\047\025\050\uffff\051\016\054\043\055\021" +
    "\056\024\057\030\060\027\001\002\000\004\050\337\001" +
    "\002\000\024\011\023\017\014\030\011\041\020\042\040" +
    "\055\021\056\024\057\055\060\027\001\002\000\004\006" +
    "\341\001\002\000\004\025\342\001\002\000\054\002\uffa1" +
    "\003\uffa1\011\uffa1\017\uffa1\025\uffa1\030\uffa1\033\uffa1\037" +
    "\uffa1\041\uffa1\042\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060" +
    "\uffa1\001\002\000\054\002\uff9d\003\uff9d\011\uff9d\017\uff9d" +
    "\025\uff9d\030\uff9d\033\uff9d\037\uff9d\041\uff9d\042\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\054\uff9d" +
    "\055\uff9d\056\uff9d\057\uff9d\060\uff9d\001\002\000\054\002" +
    "\uff9e\003\uff9e\011\uff9e\017\uff9e\025\uff9e\030\uff9e\033\uff9e" +
    "\037\uff9e\041\uff9e\042\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\001\002\000\054\002\uff9f\003\uff9f\011\uff9f\017" +
    "\uff9f\025\uff9f\030\uff9f\033\uff9f\037\uff9f\041\uff9f\042\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\001\002\000\006" +
    "\003\347\057\350\001\002\000\004\006\357\001\002\000" +
    "\010\003\351\004\uffa8\026\144\001\002\000\004\006\356" +
    "\001\002\000\004\004\353\001\002\000\026\011\023\017" +
    "\014\024\153\030\011\041\020\042\040\055\021\056\024" +
    "\057\055\060\027\001\002\000\004\006\355\001\002\000" +
    "\054\002\uffb8\003\uffb8\011\uffb8\017\uffb8\025\uffb8\030\uffb8" +
    "\033\uffb8\037\uffb8\041\uffb8\042\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\001\002\000\054\002\uffb4\003\uffb4\011" +
    "\uffb4\017\uffb4\025\uffb4\030\uffb4\033\uffb4\037\uffb4\041\uffb4" +
    "\042\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002" +
    "\000\054\002\uffb5\003\uffb5\011\uffb5\017\uffb5\025\uffb5\030" +
    "\uffb5\033\uffb5\037\uffb5\041\uffb5\042\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\056\002\005\003\016\006\052\007\050\010" +
    "\046\011\045\012\044\013\041\014\040\015\036\016\034" +
    "\017\032\030\047\031\025\032\035\033\033\034\012\035" +
    "\003\036\007\037\051\040\043\041\006\001\001\000\002" +
    "\001\001\000\006\002\345\003\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\322" +
    "\007\050\010\046\011\045\012\044\013\041\014\040\015" +
    "\036\016\034\017\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\321\015\036\016\034\017\032\001" +
    "\001\000\026\006\302\007\050\010\046\011\045\012\044" +
    "\013\041\014\040\015\036\016\034\017\032\001\001\000" +
    "\002\001\001\000\004\004\300\001\001\000\002\001\001" +
    "\000\006\002\272\003\016\001\001\000\002\001\001\000" +
    "\004\017\270\001\001\000\004\017\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\216\007\050\010\046\011\045\012\044" +
    "\013\041\014\040\015\036\016\034\017\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\002\005\003\016\006\052\007\050" +
    "\010\046\011\045\012\044\013\041\014\040\015\036\016" +
    "\034\017\032\030\047\031\025\032\035\033\033\034\012" +
    "\035\003\036\007\037\051\040\043\041\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\055\007\050\010\046\011\045\012\044\013\041\014" +
    "\040\015\036\016\034\017\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\062\007" +
    "\050\010\046\011\045\012\044\013\041\014\040\015\036" +
    "\016\034\017\032\020\060\021\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\064\001\001\000\026" +
    "\006\065\007\050\010\046\011\045\012\044\013\041\014" +
    "\040\015\036\016\034\017\032\001\001\000\002\001\001" +
    "\000\004\022\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\071\007\050\010\046\011\045\012\044" +
    "\013\041\014\040\015\036\016\034\017\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\074\010\046" +
    "\011\045\012\044\013\041\014\040\015\036\016\034\017" +
    "\032\001\001\000\002\001\001\000\020\011\125\012\044" +
    "\013\041\014\040\015\036\016\034\017\032\001\001\000" +
    "\020\011\124\012\044\013\041\014\040\015\036\016\034" +
    "\017\032\001\001\000\016\012\123\013\041\014\040\015" +
    "\036\016\034\017\032\001\001\000\002\001\001\000\020" +
    "\011\120\012\044\013\041\014\040\015\036\016\034\017" +
    "\032\001\001\000\020\011\117\012\044\013\041\014\040" +
    "\015\036\016\034\017\032\001\001\000\016\012\106\013" +
    "\041\014\040\015\036\016\034\017\032\001\001\000\020" +
    "\011\105\012\044\013\041\014\040\015\036\016\034\017" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\116\014\040\015\036\016\034\017\032\001\001\000" +
    "\014\013\115\014\040\015\036\016\034\017\032\001\001" +
    "\000\014\013\112\014\040\015\036\016\034\017\032\001" +
    "\001\000\002\001\001\000\012\014\114\015\036\016\034" +
    "\017\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\122\012\044\013\041\014\040\015\036\016\034\017" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\132\003\016\035\130\042\133\001\001\000\012\002\132" +
    "\003\016\035\130\042\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\145\001\001\000\026" +
    "\006\162\007\050\010\046\011\045\012\044\013\041\014" +
    "\040\015\036\016\034\017\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\151\007\050\010\046\011" +
    "\045\012\044\013\041\014\040\015\036\016\034\017\032" +
    "\024\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\153\007\050\010\046\011\045" +
    "\012\044\013\041\014\040\015\036\016\034\017\032\023" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\153\007\050\010\046\011\045\012" +
    "\044\013\041\014\040\015\036\016\034\017\032\023\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\174\001\001\000\026\006\172\007\050" +
    "\010\046\011\045\012\044\013\041\014\040\015\036\016" +
    "\034\017\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\200\003" +
    "\016\025\201\026\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\002" +
    "\005\003\016\006\052\007\050\010\046\011\045\012\044" +
    "\013\041\014\040\015\036\016\034\017\032\030\047\031" +
    "\025\032\035\033\033\034\012\035\003\036\007\037\051" +
    "\040\043\041\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\207\001\001\000\004\027\211\001\001" +
    "\000\006\002\212\003\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\214\001\001\000\004\027\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\221\007\050\010\046\011\045\012\044" +
    "\013\041\014\040\015\036\016\034\017\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\002\005\003\016" +
    "\006\052\007\050\010\046\011\045\012\044\013\041\014" +
    "\040\015\036\016\034\017\032\030\047\031\025\032\035" +
    "\033\033\034\012\035\003\036\007\037\051\040\043\041" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\062\007\050\010\046\011\045\012\044\013\041\014\040" +
    "\015\036\016\034\017\032\020\232\021\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\043\245\044\244\045\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\245\044\244\045" +
    "\257\001\001\000\002\001\001\000\026\006\247\007\050" +
    "\010\046\011\045\012\044\013\041\014\040\015\036\016" +
    "\034\017\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\002\005\003" +
    "\016\006\052\007\050\010\046\011\045\012\044\013\041" +
    "\014\040\015\036\016\034\017\032\030\047\031\025\032" +
    "\035\033\033\034\012\035\003\036\007\037\051\040\043" +
    "\041\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\002\005\003\016\006\052\007\050\010" +
    "\046\011\045\012\044\013\041\014\040\015\036\016\034" +
    "\017\032\030\047\031\025\032\035\033\033\034\012\035" +
    "\003\036\007\037\051\040\043\041\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\275\007\050\010\046\011" +
    "\045\012\044\013\041\014\040\015\036\016\034\017\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\305\007\050\010\046\011\045\012\044\013\041\014\040" +
    "\015\036\016\034\017\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\002\005\003\016\006\052\007\050" +
    "\010\046\011\045\012\044\013\041\014\040\015\036\016" +
    "\034\017\032\030\047\031\025\032\035\033\033\034\012" +
    "\035\003\036\007\037\051\040\043\041\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\002\005\003\016\006\052\007\050\010\046\011\045\012" +
    "\044\013\041\014\040\015\036\016\034\017\032\030\047" +
    "\031\025\032\035\033\033\034\012\035\003\036\007\037" +
    "\051\040\043\041\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\145\001" +
    "\001\000\002\001\001\000\012\002\200\003\016\025\331" +
    "\026\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\002\005\003\016\006\052\007\050" +
    "\010\046\011\045\012\044\013\041\014\040\015\036\016" +
    "\034\017\032\030\047\031\025\032\035\033\033\034\012" +
    "\035\003\036\007\037\051\040\043\041\335\001\001\000" +
    "\002\001\001\000\026\006\337\007\050\010\046\011\045" +
    "\012\044\013\041\014\040\015\036\016\034\017\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\151\007" +
    "\050\010\046\011\045\012\044\013\041\014\040\015\036" +
    "\016\034\017\032\024\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private AS as = new AS();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= INST S 
            {
              List<I> RESULT =null;
		I inst = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<I> lista_inst = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista_inst.add(0,inst); RESULT = lista_inst;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		List<I> start_val = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= 
            {
              List<I> RESULT =null;
		RESULT= new ArrayList<I>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E0 ::= E1 OR E0 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue or = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.or(op1, op2, or.getFila(), or.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E0 ::= E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E1 ::= E2 AND E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue and = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.and(op1, op2, and.getFila(), and.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E1 ::= E2 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E2 ::= E3 NOT IGUAL E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue not = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.notEqual(op1, op2, not.getFila(), not.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E2 ::= E3 GT E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue gt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.greaterThan(op1, op2, gt.getFila(), gt.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E2 ::= E3 LT E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue lt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.lessThan(op1, op2, lt.getFila(), lt.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E2 ::= E3 LE E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue le = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.lessEqual(op1, op2, le.getFila(), le.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E2 ::= E3 GE E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue ge = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.greaterEqual(op1, op2, ge.getFila(), ge.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E2 ::= E3 EQUAL E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue eq = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.equal(op1, op2, eq.getFila(), eq.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E2 ::= E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E3 ::= E3 MAS E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue mas = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.suma(op1, op2, mas.getFila(), mas.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E3 ::= E3 MENOS E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue menos = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.resta(op1, op2, menos.getFila(), menos.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E3 ::= E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E4 ::= E4 POR E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue por = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.mul(op1, op2, por.getFila(), por.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E4 ::= E4 DIV E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue div = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.div(op1, op2, div.getFila(), div.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E4 ::= E4 MOD E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue mod = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mod(op1, op2, mod.getFila(), mod.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E4 ::= E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E5 ::= E5 ELEV E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue elev = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.elev(op1, op2, elev.getFila(), elev.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E5 ::= E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E6 ::= NOT E6 
            {
              E RESULT =null;
		TokenValue not = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.not(op1, not.getFila(), not.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E6 ::= E7 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E7 ::= E7 CA E0 CC 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue ca = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT=as.squareBracket(op1, op2, ca.getFila(), ca.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E7 ::= E7 PUNTO E9 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue dot = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.dot(op1, op2, dot.getFila(), dot.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E7 ::= PUNTERO E9 
            {
              E RESULT =null;
		TokenValue puntero = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.dollar(op1, puntero.getFila(), puntero.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E7 ::= NEW TIPO CA E0 CC 
            {
              E RESULT =null;
		TokenValue nnew = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E tam = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.nnew(tipo, tam, nnew.getFila(), nnew.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E7 ::= NEW TIPO CA CC 
            {
              E RESULT =null;
		TokenValue nnew = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = as.nnew(tipo, as.num("1", nnew.getFila(), nnew.getColumna()), nnew.getFila(), nnew.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E7 ::= E8 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E8 ::= MENOS E9 
            {
              E RESULT =null;
		TokenValue menos = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.menos(op1, menos.getFila(), menos.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E8 ::= E9 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E9 ::= ENT 
            {
              E RESULT =null;
		TokenValue op1 = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.num(op1.getLexema(), op1.getFila(), op1.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E9 ::= IDEN 
            {
              E RESULT =null;
		TokenValue op1 = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.iden(op1.getLexema(), op1.getFila(), op1.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E9 ::= PA E0 PC 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E9 ::= TRUE 
            {
              E RESULT =null;
		TokenValue tru = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.basicTrue(tru.getFila(), tru.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E9 ::= FALSE 
            {
              E RESULT =null;
		TokenValue fal = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.basicFalse(fal.getFila(), fal.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E9 ::= IDEN PA LIST_ARG PC 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> args = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue pc = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.llamadaFuncion(as.iden(id.getLexema(), id.getFila(), id.getColumna()), args, pc.getFila(), pc.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LIST_ARG ::= 
            {
              List<E> RESULT =null;
		RESULT=new ArrayList<E>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_ARG",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LIST_ARG ::= CON_ARG 
            {
              List<E> RESULT =null;
		List<E> op1 = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_ARG",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CON_ARG ::= E0 ARG 
            {
              List<E> RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<E> op2 = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		op2.add(0, op1); RESULT=op2;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CON_ARG",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARG ::= COMA E0 ARG 
            {
              List<E> RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<E> op2 = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		op2.add(0, op1); RESULT=op2;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARG",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARG ::= 
            {
              List<E> RESULT =null;
		RESULT=new ArrayList<E>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARG",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= INST_IF 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= INST_WHILE 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INST ::= INST_SWITCH 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INST ::= INST_ASIG 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INST ::= INST_DECL 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INST ::= INST_STRUCT 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INST ::= INST_DECL_FUN 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INST ::= INST_CALL_PROC 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INST_IF ::= IF PA E0 PC LA S LC 
            {
              I RESULT =null;
		TokenValue iff = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instIf(condicion, cuerpo, null, iff.getFila(), iff.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INST_IF ::= IF PA E0 PC LA S LC ELSE LA S LC 
            {
              I RESULT =null;
		TokenValue iff = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		List<I> cuerpo_if = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<I> cuerpo_else = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instIf(condicion, cuerpo_if, cuerpo_else, iff.getFila(), iff.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INST_IF ::= IF error LC 
            {
              I RESULT =null;
		System.err.println("Error en la condicion del if\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INST_IF ::= IF E0 error LC 
            {
              I RESULT =null;
		System.err.println("Error en el cuerpo del if o del else\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INST_WHILE ::= WHILE PA E0 PC LA S LC 
            {
              I RESULT =null;
		TokenValue whilee = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instWhile(condicion, cuerpo, whilee.getFila(), whilee.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INST_WHILE ::= WHILE error LC 
            {
              I RESULT =null;
		System.err.println("Error en la condicion del while\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INST_WHILE ::= WHILE E0 error LC 
            {
              I RESULT =null;
		System.err.println("Error en el cuerpo del while\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INST_SWITCH ::= SWITCH PA IDEN PC LA LIST_CASE LC 
            {
              I RESULT =null;
		TokenValue switchh = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		TokenValue condicion = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Pair<E,List<I>>> list_cases = (List<Pair<E,List<I>>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instSwitch(as.iden(condicion.getLexema(), condicion.getFila(), condicion.getColumna()), list_cases, switchh.getFila(), switchh.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_SWITCH",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INST_SWITCH ::= SWITCH error LC 
            {
              I RESULT =null;
		System.err.println("Error en el selector del switch\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_SWITCH",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LIST_CASE ::= 
            {
              List<Pair<E,List<I>>> RESULT =null;
		List<Pair<E, List<I>>> cases = new ArrayList<Pair<E, List<I>>>(); RESULT = cases;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_CASE",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LIST_CASE ::= SINGLE_CASE LIST_CASE 
            {
              List<Pair<E,List<I>>> RESULT =null;
		Pair<E,List<I>> single_case = (Pair<E,List<I>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Pair<E,List<I>>> cases = (List<Pair<E,List<I>>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		cases.add(0, single_case); RESULT = cases;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_CASE",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LIST_CASE ::= SINGLE_DEFAULT 
            {
              List<Pair<E,List<I>>> RESULT =null;
		Pair<E,List<I>> defa = (Pair<E,List<I>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		List<Pair<E, List<I>>> cases = new ArrayList<Pair<E, List<I>>>(); cases.add(defa); RESULT = cases;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_CASE",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SINGLE_CASE ::= CASE E0 LA S LC 
            {
              Pair<E,List<I>> RESULT =null;
		E selector = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new Pair<E, List<I>>(selector, cuerpo);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SINGLE_CASE",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SINGLE_CASE ::= CASE error LC 
            {
              Pair<E,List<I>> RESULT =null;
		System.err.println("Error en la expresion del case del switch\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SINGLE_CASE",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SINGLE_CASE ::= CASE E0 error LC 
            {
              Pair<E,List<I>> RESULT =null;
		System.err.println("Error en el cuerpo del case del switch\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SINGLE_CASE",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SINGLE_DEFAULT ::= DEFAULT LA S LC 
            {
              Pair<E,List<I>> RESULT =null;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new Pair<E, List<I>>(null, cuerpo);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SINGLE_DEFAULT",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SINGLE_DEFAULT ::= DEFAULT error LC 
            {
              Pair<E,List<I>> RESULT =null;
		System.err.println("Error en el cuerpo del default del switch\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SINGLE_DEFAULT",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INST_ASIG ::= E0 IGUAL E0 PCOMA 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue igual = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valor = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instAsignacion(id, valor, igual.getFila(), igual.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INST_ASIG ::= error PCOMA 
            {
              I RESULT =null;
		System.err.println("Error en la asignacion\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INST_DECL ::= TIPO IDEN TIPO_ARRAY PCOMA 
            {
              I RESULT =null;
		Tipo tipoBase = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Tipo tipoArray = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Tipo tipoDeclaracion;
  if(tipoArray == null) tipoDeclaracion = tipoBase;
  else{
	  TipoArray t = (TipoArray) tipoArray;
	  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
	  t.setTipoBase(tipoBase);
	  tipoDeclaracion = tipoArray;
  }
  RESULT = as.instDeclaracion(false, tipoDeclaracion, as.iden(id.getLexema(), id.getFila(), id.getColumna()), null, id.getFila(), id.getColumna());

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INST_DECL ::= TIPO IDEN TIPO_ARRAY IGUAL INIT_LIST_VAL PCOMA 
            {
              I RESULT =null;
		Tipo tipoBase = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Tipo tipoArray = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> valor = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Tipo tipoDeclaracion;
  if(tipoArray == null) tipoDeclaracion = tipoBase;
  else{
	  TipoArray t = (TipoArray) tipoArray;
	  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
	  t.setTipoBase(tipoBase);
	  tipoDeclaracion = tipoArray;
  }
  RESULT = as.instDeclaracion(false, tipoDeclaracion, as.iden(id.getLexema(), id.getFila(), id.getColumna()), valor, id.getFila(), id.getColumna());

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INST_DECL ::= CONST TIPO IDEN TIPO_ARRAY IGUAL INIT_LIST_VAL PCOMA 
            {
              I RESULT =null;
		Tipo tipoBase = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Tipo tipoArray = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> valor = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Tipo tipoDeclaracion;
  if(tipoArray == null) tipoDeclaracion = tipoBase;
  else{
	  TipoArray t = (TipoArray) tipoArray;
	  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
	  t.setTipoBase(tipoBase);
	  tipoDeclaracion = tipoArray;
  }
  RESULT = as.instDeclaracion(true, tipoDeclaracion, as.iden(id.getLexema(), id.getFila(), id.getColumna()), valor, id.getFila(), id.getColumna());

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INST_DECL ::= TIPO error PCOMA 
            {
              I RESULT =null;
		System.err.println("Error en la declaracion. Identificador erroneo\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INST_DECL ::= TIPO IDEN error PCOMA 
            {
              I RESULT =null;
		System.err.println("Error la declaracion. Valor inicial erroneo\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INST_DECL ::= CONST TIPO error PCOMA 
            {
              I RESULT =null;
		System.err.println("Error en la declaracion. Identificado erroneo\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INST_DECL ::= CONST TIPO IDEN error PCOMA 
            {
              I RESULT =null;
		System.err.println("Error en la declaracion. Valor inicial erroneo\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INIT_LIST_VAL ::= E0 
            {
              List<E> RESULT =null;
		E val = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<E> list = new ArrayList<E>(); list.add(0, val); RESULT = list; RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INIT_LIST_VAL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INIT_LIST_VAL ::= LA LIST_VAL LC 
            {
              List<E> RESULT =null;
		List<E> list = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INIT_LIST_VAL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LIST_VAL ::= E0 
            {
              List<E> RESULT =null;
		E val = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		List<E> list = new ArrayList<E>(); list.add(0, val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LIST_VAL ::= E0 COMA LIST_VAL 
            {
              List<E> RESULT =null;
		E val = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<E> list = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPO ::= TIPO_BASICO 
            {
              Tipo RESULT =null;
		Tipo tipoBasico = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = tipoBasico;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPO_BASICO ::= INT 
            {
              Tipo RESULT =null;
		TokenValue tipoBasico = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoInt();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIPO_BASICO ::= BOOLEAN 
            {
              Tipo RESULT =null;
		TokenValue tipoBasico = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoBoolean();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO_BASICO ::= IDEN 
            {
              Tipo RESULT =null;
		TokenValue tipoPropio = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoStruct(tipoPropio.getLexema(), tipoPropio.getFila(), tipoPropio.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPO ::= TIPO_BASICO TIPO_PUNTERO 
            {
              Tipo RESULT =null;
		Tipo tipoBasico = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Tipo tipoPuntero = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		TipoPuntero t = (TipoPuntero) tipoPuntero;
  while(t.getTipoApuntado() != null) t = (TipoPuntero) t.getTipoApuntado();
  t.setTipoApuntado(tipoBasico);
  RESULT = tipoPuntero;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO_PUNTERO ::= PUNTERO 
            {
              Tipo RESULT =null;
		TokenValue puntero = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoPuntero(null, puntero.getFila(), puntero.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_PUNTERO",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO_PUNTERO ::= PUNTERO TIPO_PUNTERO 
            {
              Tipo RESULT =null;
		TokenValue puntero = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Tipo tipoPuntero = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoPuntero(tipoPuntero, puntero.getFila(), puntero.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_PUNTERO",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO_ARRAY ::= 
            {
              Tipo RESULT =null;
		RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO_ARRAY ::= CA E0 CC TIPO_ARRAY 
            {
              Tipo RESULT =null;
		TokenValue ca = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E dimension = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Tipo tipoArray = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoArray(tipoArray, dimension, ca.getFila(), ca.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INST_STRUCT ::= STRUCT LA LIST_DECL LC IDEN PCOMA 
            {
              I RESULT =null;
		TokenValue struct = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<I> lista = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instStruct(as.iden(nombre.getLexema(), nombre.getFila(), nombre.getColumna()), lista, struct.getFila(), struct.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_STRUCT",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INST_STRUCT ::= STRUCT error PCOMA 
            {
              I RESULT =null;
		System.err.println("Error en la declaracion del struct. Campo erroneo.\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_STRUCT",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INST_STRUCT ::= STRUCT LA LIST_DECL LC error PCOMA 
            {
              I RESULT =null;
		System.err.println("Error en la declaracion del struct. Identificador erroneo.\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_STRUCT",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LIST_DECL ::= INST_DECL LIST_DECL 
            {
              List<I> RESULT =null;
		I decl = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<I> lista = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(0, decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_DECL",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LIST_DECL ::= 
            {
              List<I> RESULT =null;
		RESULT = new ArrayList<I>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_DECL",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INST_DECL_FUN ::= TIPO IDEN PA LIST_TIPO_ARG PC LA S RETURN E0 PCOMA LC 
            {
              I RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		List<Pair<Tipo,E>> argumentos = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E ret = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = as.instDeclFun(tipo, as.iden(id.getLexema(), id.getFila(), id.getColumna()), argumentos, cuerpo, ret, id.getFila(), id.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INST_DECL_FUN ::= PROC IDEN PA LIST_TIPO_ARG PC LA S LC 
            {
              I RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		List<Pair<Tipo,E>> argumentos = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instDeclFun(null, as.iden(id.getLexema(), id.getFila(), id.getColumna()), argumentos, cuerpo, null, id.getFila(), id.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INST_DECL_FUN ::= TIPO error LC 
            {
              I RESULT =null;
		System.err.println("Error en la declaracion de la funcion. Identificador erroneo\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INST_DECL_FUN ::= TIPO IDEN error LC 
            {
              I RESULT =null;
		System.err.println("Error en la declaracion de la funcion. Parametros erroneos\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INST_DECL_FUN ::= TIPO IDEN PA LIST_TIPO_ARG PC error LC 
            {
              I RESULT =null;
		System.err.println("Error en la declaracion de la funcion. Cuerpo erroneo\n");
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LIST_TIPO_ARG ::= 
            {
              List<Pair<Tipo,E>> RESULT =null;
		RESULT=new ArrayList<Pair<Tipo, E>>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_TIPO_ARG",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LIST_TIPO_ARG ::= CON_TIPO_ARG 
            {
              List<Pair<Tipo,E>> RESULT =null;
		List<Pair<Tipo,E>> argumentos = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=argumentos;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_TIPO_ARG",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CON_TIPO_ARG ::= TIPO IDEN TIPO_ARRAY TIPO_ARG 
            {
              List<Pair<Tipo,E>> RESULT =null;
		Tipo tipoBase = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue nombreArgumento = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Tipo tipoArray = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Pair<Tipo,E>> argumentos = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
  Tipo tipoArgumento;
  if(tipoArray == null) tipoArgumento = tipoBase;
  else{
	  TipoArray t = (TipoArray) tipoArray;
	  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
	  t.setTipoBase(tipoBase);
	  tipoArgumento = tipoArray;
  }
  argumentos.add(0, new Pair<Tipo, E>(tipoArgumento, as.iden(nombreArgumento.getLexema(), nombreArgumento.getFila(), nombreArgumento.getColumna()))); 
  RESULT=argumentos;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CON_TIPO_ARG",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPO_ARG ::= COMA TIPO IDEN TIPO_ARRAY TIPO_ARG 
            {
              List<Pair<Tipo,E>> RESULT =null;
		Tipo tipoBase = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue nombreArgumento = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Tipo tipoArray = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Pair<Tipo,E>> argumentos = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
  Tipo tipoArgumento;
  if(tipoArray == null) tipoArgumento = tipoBase;
  else{
	  TipoArray t = (TipoArray) tipoArray;
	  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
	  t.setTipoBase(tipoBase);
	  tipoArgumento = tipoArray;
  }
  argumentos.add(0, new Pair<Tipo, E>(tipoArgumento, as.iden(nombreArgumento.getLexema(), nombreArgumento.getFila(), nombreArgumento.getColumna()))); 
  RESULT=argumentos;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARG",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO_ARG ::= 
            {
              List<Pair<Tipo,E>> RESULT =null;
		RESULT=new ArrayList<Pair<Tipo, E>>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARG",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INST_CALL_PROC ::= IDEN PA LIST_ARG PC PCOMA 
            {
              I RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<E> args = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = as.instCallProc(as.iden(id.getLexema(), id.getFila(), id.getColumna()), args, id.getFila(), id.getColumna());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL_PROC",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

