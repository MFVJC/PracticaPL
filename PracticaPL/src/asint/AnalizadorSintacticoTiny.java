
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Jun 10 20:48:49 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.*;
import ast.E.*;
import ast.I.*;
import ast.T.*;
import java.util.List;
import java.util.ArrayList;
import javafx.util.Pair;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Jun 10 20:48:49 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\041\004\000\002\002\004\000\002\041" +
    "\002\000\002\006\005\000\002\006\003\000\002\007\005" +
    "\000\002\007\003\000\002\010\006\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\005\000" +
    "\002\013\003\000\002\014\004\000\002\014\003\000\002" +
    "\015\006\000\002\015\005\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\016\004\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\006\000\002" +
    "\020\002\000\002\020\003\000\002\021\004\000\002\022" +
    "\005\000\002\022\002\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\012\000\002\031\016\000\002\032\012\000\002\033" +
    "\011\000\002\045\002\000\002\045\004\000\002\045\003" +
    "\000\002\044\010\000\002\043\006\000\002\034\006\000" +
    "\002\035\005\000\002\035\007\000\002\035\010\000\002" +
    "\024\003\000\002\024\005\000\002\023\005\000\002\023" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\002\004\000\002\004\003\000" +
    "\002\004\004\000\002\002\004\000\002\005\005\000\002" +
    "\005\006\000\002\036\010\000\002\042\004\000\002\042" +
    "\002\000\002\037\015\000\002\037\012\000\002\025\002" +
    "\000\002\025\003\000\002\026\005\000\002\027\006\000" +
    "\002\027\002\000\002\040\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\046\002\uffff\011\022\017\014\030\011\033" +
    "\015\037\012\041\020\042\037\044\031\045\005\046\030" +
    "\047\025\051\016\054\042\055\021\056\023\057\027\060" +
    "\026\001\002\000\052\002\uffd2\011\uffd2\017\uffd2\025\uffd2" +
    "\030\uffd2\033\uffd2\037\uffd2\041\uffd2\042\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\060\uffd2\001\002\000\010\037\012\051" +
    "\016\057\130\001\002\000\004\057\267\001\002\000\004" +
    "\002\266\001\002\000\052\002\uffd1\011\uffd1\017\uffd1\025" +
    "\uffd1\030\uffd1\033\uffd1\037\uffd1\041\uffd1\042\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\001\002\000\024\011\022" +
    "\017\014\030\011\041\020\042\037\055\021\056\023\057" +
    "\054\060\026\001\002\000\066\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\035\uffbc\036" +
    "\uffbc\040\uffbc\056\uffbc\057\uffbc\001\002\000\052\002\uffd3" +
    "\011\uffd3\017\uffd3\025\uffd3\030\uffd3\033\uffd3\037\uffd3\041" +
    "\uffd3\042\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\001" +
    "\002\000\024\011\022\017\014\030\011\041\020\042\037" +
    "\055\021\056\023\057\054\060\026\001\002\000\004\030" +
    "\250\001\002\000\066\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\031\uffbb\035\uffbb\036\uffbb\040" +
    "\uffbb\056\uffbb\057\uffbb\001\002\000\066\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\243\025\uffbd\026\uffbd\027\uffbd\031\uffbd\035" +
    "\uffbd\036\uffbd\040\uffbd\056\240\057\uffbd\001\002\000\060" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde\031" +
    "\uffde\035\uffde\036\uffde\040\uffde\001\002\000\010\037\012" +
    "\051\016\057\130\001\002\000\014\030\011\041\020\042" +
    "\037\057\054\060\026\001\002\000\014\030\011\041\020" +
    "\042\037\057\054\060\026\001\002\000\052\002\uffd6\011" +
    "\uffd6\017\uffd6\025\uffd6\030\uffd6\033\uffd6\037\uffd6\041\uffd6" +
    "\042\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\001\002" +
    "\000\004\030\212\001\002\000\060\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1\035\uffe1\036\uffe1" +
    "\040\uffe1\001\002\000\054\004\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffba\026\uffe0\030" +
    "\206\035\uffe0\036\uffe0\056\uffba\057\uffba\001\002\000\004" +
    "\030\177\001\002\000\004\057\160\001\002\000\060\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2" +
    "\035\uffe2\036\uffe2\040\uffe2\001\002\000\052\002\uffd4\011" +
    "\uffd4\017\uffd4\025\uffd4\030\uffd4\033\uffd4\037\uffd4\041\uffd4" +
    "\042\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\001\002" +
    "\000\060\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\031\uffe4\035\uffe4\036\uffe4\040\uffe4\001\002\000\052" +
    "\002\uffd5\011\uffd5\017\uffd5\025\uffd5\030\uffd5\033\uffd5\037" +
    "\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\001\002\000\060\004\uffe9\005\uffe9\006\uffe9\007\153" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9" +
    "\026\154\027\uffe9\031\uffe9\035\uffe9\036\uffe9\040\uffe9\001" +
    "\002\000\060\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\031\uffdd\035\uffdd\036\uffdd\040\uffdd\001\002\000" +
    "\054\004\uffeb\005\uffeb\006\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\025\uffeb\027\uffeb\031\uffeb\035\uffeb" +
    "\036\uffeb\040\uffeb\001\002\000\054\004\uffed\005\uffed\006" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\025" +
    "\uffed\027\uffed\031\uffed\035\113\036\uffed\040\uffed\001\002" +
    "\000\004\024\126\001\002\000\052\002\uffcf\011\uffcf\017" +
    "\uffcf\025\uffcf\030\uffcf\033\uffcf\037\uffcf\041\uffcf\042\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\001\002\000\052" +
    "\004\ufff1\005\ufff1\006\ufff1\010\ufff1\011\ufff1\012\111\013" +
    "\110\014\107\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\025\ufff1\027\ufff1\031\ufff1\036\ufff1\040" +
    "\ufff1\001\002\000\044\004\ufff4\005\ufff4\006\ufff4\010\077" +
    "\011\103\015\ufff4\016\ufff4\017\100\020\075\021\076\022" +
    "\102\023\104\025\ufff4\027\ufff4\031\ufff4\036\101\040\ufff4" +
    "\001\002\000\024\004\ufffb\005\ufffb\006\ufffb\015\073\016" +
    "\ufffb\025\ufffb\027\ufffb\031\ufffb\040\ufffb\001\002\000\052" +
    "\002\uffff\011\022\017\014\025\uffff\030\011\033\015\037" +
    "\012\041\020\042\037\044\031\045\005\046\030\047\025" +
    "\050\uffff\051\016\054\042\055\021\056\023\057\027\060" +
    "\026\001\002\000\022\004\ufffd\005\ufffd\006\ufffd\016\070" +
    "\025\ufffd\027\ufffd\031\ufffd\040\ufffd\001\002\000\052\002" +
    "\uffd0\011\uffd0\017\uffd0\025\uffd0\030\uffd0\033\uffd0\037\uffd0" +
    "\041\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\001\002\000\004\004\053\001\002\000\024\011\022\017" +
    "\014\030\011\041\020\042\037\055\021\056\023\057\054" +
    "\060\026\001\002\000\062\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\057\031\uffe0\035\uffe0\036\uffe0" +
    "\040\uffe0\001\002\000\004\006\056\001\002\000\052\002" +
    "\uffc5\011\uffc5\017\uffc5\025\uffc5\030\uffc5\033\uffc5\037\uffc5" +
    "\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\001\002\000\026\011\022\017\014\030\011\031\uffdb\041" +
    "\020\042\037\055\021\056\023\057\054\060\026\001\002" +
    "\000\004\031\067\001\002\000\004\031\uffda\001\002\000" +
    "\006\005\063\031\uffd7\001\002\000\024\011\022\017\014" +
    "\030\011\041\020\042\037\055\021\056\023\057\054\060" +
    "\026\001\002\000\004\031\uffd9\001\002\000\006\005\063" +
    "\031\uffd7\001\002\000\004\031\uffd8\001\002\000\060\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc" +
    "\035\uffdc\036\uffdc\040\uffdc\001\002\000\024\011\022\017" +
    "\014\030\011\041\020\042\037\055\021\056\023\057\054" +
    "\060\026\001\002\000\020\004\ufffe\005\ufffe\006\ufffe\025" +
    "\ufffe\027\ufffe\031\ufffe\040\ufffe\001\002\000\010\002\001" +
    "\025\001\050\001\001\002\000\024\011\022\017\014\030" +
    "\011\041\020\042\037\055\021\056\023\057\054\060\026" +
    "\001\002\000\022\004\ufffc\005\ufffc\006\ufffc\016\ufffc\025" +
    "\ufffc\027\ufffc\031\ufffc\040\ufffc\001\002\000\024\011\022" +
    "\017\014\030\011\041\020\042\037\055\021\056\023\057" +
    "\054\060\026\001\002\000\024\011\022\017\014\030\011" +
    "\041\020\042\037\055\021\056\023\057\054\060\026\001" +
    "\002\000\024\011\022\017\014\030\011\041\020\042\037" +
    "\055\021\056\023\057\054\060\026\001\002\000\004\004" +
    "\121\001\002\000\024\011\022\017\014\030\011\041\020" +
    "\042\037\055\021\056\023\057\054\060\026\001\002\000" +
    "\024\011\022\017\014\030\011\041\020\042\037\055\021" +
    "\056\023\057\054\060\026\001\002\000\024\011\022\017" +
    "\014\030\011\041\020\042\037\055\021\056\023\057\054" +
    "\060\026\001\002\000\024\011\022\017\014\030\011\041" +
    "\020\042\037\055\021\056\023\057\054\060\026\001\002" +
    "\000\030\004\ufff6\005\ufff6\006\ufff6\010\077\011\103\015" +
    "\ufff6\016\ufff6\025\ufff6\027\ufff6\031\ufff6\040\ufff6\001\002" +
    "\000\052\004\ufff2\005\ufff2\006\ufff2\010\ufff2\011\ufff2\012" +
    "\111\013\110\014\107\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\025\ufff2\027\ufff2\031\ufff2\036" +
    "\ufff2\040\ufff2\001\002\000\024\011\022\017\014\030\011" +
    "\041\020\042\037\055\021\056\023\057\054\060\026\001" +
    "\002\000\024\011\022\017\014\030\011\041\020\042\037" +
    "\055\021\056\023\057\054\060\026\001\002\000\024\011" +
    "\022\017\014\030\011\041\020\042\037\055\021\056\023" +
    "\057\054\060\026\001\002\000\054\004\ufff0\005\ufff0\006" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\025" +
    "\ufff0\027\ufff0\031\ufff0\035\113\036\ufff0\040\ufff0\001\002" +
    "\000\024\011\022\017\014\030\011\041\020\042\037\055" +
    "\021\056\023\057\054\060\026\001\002\000\054\004\uffec" +
    "\005\uffec\006\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\025\uffec\027\uffec\031\uffec\035\uffec\036\uffec\040" +
    "\uffec\001\002\000\054\004\uffef\005\uffef\006\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\025\uffef\027\uffef" +
    "\031\uffef\035\113\036\uffef\040\uffef\001\002\000\054\004" +
    "\uffee\005\uffee\006\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\025\uffee\027\uffee\031\uffee\035\113\036\uffee" +
    "\040\uffee\001\002\000\030\004\ufff7\005\ufff7\006\ufff7\010" +
    "\077\011\103\015\ufff7\016\ufff7\025\ufff7\027\ufff7\031\ufff7" +
    "\040\ufff7\001\002\000\030\004\ufff5\005\ufff5\006\ufff5\010" +
    "\077\011\103\015\ufff5\016\ufff5\025\ufff5\027\ufff5\031\ufff5" +
    "\040\ufff5\001\002\000\024\011\022\017\014\030\011\041" +
    "\020\042\037\055\021\056\023\057\054\060\026\001\002" +
    "\000\030\004\ufffa\005\ufffa\006\ufffa\010\077\011\103\015" +
    "\ufffa\016\ufffa\025\ufffa\027\ufffa\031\ufffa\040\ufffa\001\002" +
    "\000\052\004\ufff3\005\ufff3\006\ufff3\010\ufff3\011\ufff3\012" +
    "\111\013\110\014\107\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\025\ufff3\027\ufff3\031\ufff3\036" +
    "\ufff3\040\ufff3\001\002\000\030\004\ufff9\005\ufff9\006\ufff9" +
    "\010\077\011\103\015\ufff9\016\ufff9\025\ufff9\027\ufff9\031" +
    "\ufff9\040\ufff9\001\002\000\030\004\ufff8\005\ufff8\006\ufff8" +
    "\010\077\011\103\015\ufff8\016\ufff8\025\ufff8\027\ufff8\031" +
    "\ufff8\040\ufff8\001\002\000\014\025\uffb1\037\012\045\005" +
    "\051\016\057\130\001\002\000\014\025\uffb1\037\012\045" +
    "\005\051\016\057\130\001\002\000\066\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\031\uffba\035" +
    "\uffba\036\uffba\040\uffba\056\uffba\057\uffba\001\002\000\004" +
    "\057\136\001\002\000\004\025\133\001\002\000\004\057" +
    "\134\001\002\000\004\006\135\001\002\000\052\002\uffb3" +
    "\011\uffb3\017\uffb3\025\uffb3\030\uffb3\033\uffb3\037\uffb3\041" +
    "\uffb3\042\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\001" +
    "\002\000\006\004\137\006\140\001\002\000\026\011\022" +
    "\017\014\024\143\030\011\041\020\042\037\055\021\056" +
    "\023\057\054\060\026\001\002\000\052\002\uffc4\011\uffc4" +
    "\017\uffc4\025\uffc4\030\uffc4\033\uffc4\037\uffc4\041\uffc4\042" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\001\002\000" +
    "\004\006\151\001\002\000\004\006\uffc1\001\002\000\024" +
    "\011\022\017\014\030\011\041\020\042\037\055\021\056" +
    "\023\057\054\060\026\001\002\000\006\005\147\025\uffbe" +
    "\001\002\000\004\025\146\001\002\000\004\006\uffc0\001" +
    "\002\000\024\011\022\017\014\030\011\041\020\042\037" +
    "\055\021\056\023\057\054\060\026\001\002\000\004\025" +
    "\uffbf\001\002\000\052\002\uffc3\011\uffc3\017\uffc3\025\uffc3" +
    "\030\uffc3\033\uffc3\037\uffc3\041\uffc3\042\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\001\002\000\004\025\uffb2\001" +
    "\002\000\014\030\011\041\020\042\037\057\054\060\026" +
    "\001\002\000\024\011\022\017\014\030\011\041\020\042" +
    "\037\055\021\056\023\057\054\060\026\001\002\000\004" +
    "\027\156\001\002\000\060\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\031\uffe8\035\uffe8\036\uffe8\040\uffe8" +
    "\001\002\000\060\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\031\uffe7\035\uffe7\036\uffe7\040\uffe7\001\002" +
    "\000\004\030\161\001\002\000\012\031\uffae\037\012\051" +
    "\016\057\130\001\002\000\004\031\uffad\001\002\000\004" +
    "\057\171\001\002\000\004\031\165\001\002\000\004\024" +
    "\166\001\002\000\046\011\022\017\014\025\uffff\030\011" +
    "\033\015\037\012\041\020\042\037\044\031\045\005\046" +
    "\030\047\025\051\016\054\042\055\021\056\023\057\027" +
    "\060\026\001\002\000\004\025\170\001\002\000\052\002" +
    "\uffaf\011\uffaf\017\uffaf\025\uffaf\030\uffaf\033\uffaf\037\uffaf" +
    "\041\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\001\002\000\006\005\172\031\uffaa\001\002\000\010\037" +
    "\012\051\016\057\130\001\002\000\004\031\uffac\001\002" +
    "\000\004\057\175\001\002\000\006\005\172\031\uffaa\001" +
    "\002\000\004\031\uffab\001\002\000\024\011\022\017\014" +
    "\030\011\041\020\042\037\055\021\056\023\057\054\060" +
    "\026\001\002\000\004\031\201\001\002\000\004\034\202" +
    "\001\002\000\004\024\203\001\002\000\046\011\022\017" +
    "\014\025\uffff\030\011\033\015\037\012\041\020\042\037" +
    "\044\031\045\005\046\030\047\025\051\016\054\042\055" +
    "\021\056\023\057\027\060\026\001\002\000\004\025\205" +
    "\001\002\000\052\002\uffcc\011\uffcc\017\uffcc\025\uffcc\030" +
    "\uffcc\033\uffcc\037\uffcc\041\uffcc\042\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\001\002\000\026\011\022\017\014" +
    "\030\011\031\uffdb\041\020\042\037\055\021\056\023\057" +
    "\054\060\026\001\002\000\004\031\210\001\002\000\046" +
    "\004\uffdc\006\211\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\026\uffdc\035\uffdc\036\uffdc\001\002\000" +
    "\052\002\uffa9\011\uffa9\017\uffa9\025\uffa9\030\uffa9\033\uffa9" +
    "\037\uffa9\041\uffa9\042\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\001\002\000\004\057\213\001\002\000\004\031" +
    "\214\001\002\000\004\024\215\001\002\000\010\025\uffca" +
    "\052\216\053\222\001\002\000\004\024\232\001\002\000" +
    "\004\025\231\001\002\000\010\025\uffca\052\216\053\222" +
    "\001\002\000\004\025\uffc8\001\002\000\024\011\022\017" +
    "\014\030\011\041\020\042\037\055\021\056\023\057\054" +
    "\060\026\001\002\000\004\040\224\001\002\000\004\024" +
    "\225\001\002\000\046\011\022\017\014\025\uffff\030\011" +
    "\033\015\037\012\041\020\042\037\044\031\045\005\046" +
    "\030\047\025\051\016\054\042\055\021\056\023\057\027" +
    "\060\026\001\002\000\004\025\227\001\002\000\010\025" +
    "\uffc7\052\uffc7\053\uffc7\001\002\000\004\025\uffc9\001\002" +
    "\000\052\002\uffcb\011\uffcb\017\uffcb\025\uffcb\030\uffcb\033" +
    "\uffcb\037\uffcb\041\uffcb\042\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\001\002\000\046\011\022\017\014\025\uffff" +
    "\030\011\033\015\037\012\041\020\042\037\044\031\045" +
    "\005\046\030\047\025\051\016\054\042\055\021\056\023" +
    "\057\027\060\026\001\002\000\004\025\234\001\002\000" +
    "\004\025\uffc6\001\002\000\060\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\031\uffe6\035\uffe6\036\uffe6\040" +
    "\uffe6\001\002\000\060\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\031\uffe3\035\uffe3\036\uffe3\040\uffe3\001" +
    "\002\000\060\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\031\uffe5\035\uffe5\036\uffe5\040\uffe5\001\002\000" +
    "\064\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\031\uffb8\035\uffb8\036\uffb8\040\uffb8\056\240\057\uffb8\001" +
    "\002\000\062\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\031\uffb9\035\uffb9\036\uffb9\040\uffb9\057\uffb9\001" +
    "\002\000\062\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\031\uffb6\035\uffb6\036\uffb6\040\uffb6\057\uffb6\001" +
    "\002\000\024\011\022\017\014\030\011\041\020\042\037" +
    "\055\021\056\023\057\054\060\026\001\002\000\004\025" +
    "\245\001\002\000\064\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\243" +
    "\025\uffb5\026\uffb5\027\uffb5\031\uffb5\035\uffb5\036\uffb5\040" +
    "\uffb5\057\uffb5\001\002\000\062\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\031\uffb4\035\uffb4\036\uffb4\040" +
    "\uffb4\057\uffb4\001\002\000\062\004\uffb7\005\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\031\uffb7\035\uffb7\036\uffb7\040" +
    "\uffb7\057\uffb7\001\002\000\024\011\022\017\014\030\011" +
    "\041\020\042\037\055\021\056\023\057\054\060\026\001" +
    "\002\000\004\031\252\001\002\000\004\040\253\001\002" +
    "\000\004\024\254\001\002\000\046\011\022\017\014\025" +
    "\uffff\030\011\033\015\037\012\041\020\042\037\044\031" +
    "\045\005\046\030\047\025\051\016\054\042\055\021\056" +
    "\023\057\027\060\026\001\002\000\004\025\256\001\002" +
    "\000\054\002\uffce\011\uffce\017\uffce\025\uffce\030\uffce\033" +
    "\uffce\037\uffce\041\uffce\042\uffce\043\257\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\001\002\000\004\024\260\001\002" +
    "\000\046\011\022\017\014\025\uffff\030\011\033\015\037" +
    "\012\041\020\042\037\044\031\045\005\046\030\047\025" +
    "\051\016\054\042\055\021\056\023\057\027\060\026\001" +
    "\002\000\004\025\262\001\002\000\052\002\uffcd\011\uffcd" +
    "\017\uffcd\025\uffcd\030\uffcd\033\uffcd\037\uffcd\041\uffcd\042" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\001\002\000" +
    "\054\004\uffea\005\uffea\006\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\025\uffea\027\uffea\031\uffea\035\uffea" +
    "\036\uffea\040\uffea\001\002\000\004\031\265\001\002\000" +
    "\060\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\031\uffdf\035\uffdf\036\uffdf\040\uffdf\001\002\000\004\002" +
    "\000\001\002\000\010\004\137\006\140\030\270\001\002" +
    "\000\012\031\uffae\037\012\051\016\057\130\001\002\000" +
    "\004\031\272\001\002\000\004\024\273\001\002\000\046" +
    "\011\022\017\014\030\011\033\015\037\012\041\020\042" +
    "\037\044\031\045\005\046\030\047\025\050\uffff\051\016" +
    "\054\042\055\021\056\023\057\027\060\026\001\002\000" +
    "\004\050\275\001\002\000\024\011\022\017\014\030\011" +
    "\041\020\042\037\055\021\056\023\057\054\060\026\001" +
    "\002\000\004\006\277\001\002\000\004\025\300\001\002" +
    "\000\052\002\uffb0\011\uffb0\017\uffb0\025\uffb0\030\uffb0\033" +
    "\uffb0\037\uffb0\041\uffb0\042\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\001\002\000\004\057\302\001\002\000\004" +
    "\004\303\001\002\000\026\011\022\017\014\024\143\030" +
    "\011\041\020\042\037\055\021\056\023\057\054\060\026" +
    "\001\002\000\004\006\305\001\002\000\052\002\uffc2\011" +
    "\uffc2\017\uffc2\025\uffc2\030\uffc2\033\uffc2\037\uffc2\041\uffc2" +
    "\042\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\056\002\005\003\016\006\051\007\047\010" +
    "\045\011\044\012\043\013\040\014\037\015\035\016\033" +
    "\017\031\030\046\031\023\032\034\033\032\034\012\035" +
    "\003\036\007\037\050\040\042\041\006\001\001\000\002" +
    "\001\001\000\006\002\300\003\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\263" +
    "\007\047\010\045\011\044\012\043\013\040\014\037\015" +
    "\035\016\033\017\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\262\015\035\016\033\017\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\240" +
    "\005\241\001\001\000\002\001\001\000\006\002\236\003" +
    "\016\001\001\000\004\017\235\001\001\000\004\017\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\002\005\003\016\006\051\007\047\010\045\011" +
    "\044\012\043\013\040\014\037\015\035\016\033\017\031" +
    "\030\046\031\023\032\034\033\032\034\012\035\003\036" +
    "\007\037\050\040\042\041\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\054\007" +
    "\047\010\045\011\044\012\043\013\040\014\037\015\035" +
    "\016\033\017\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\061\007\047\010\045" +
    "\011\044\012\043\013\040\014\037\015\035\016\033\017" +
    "\031\020\057\021\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\063\001\001\000\026\006\064\007" +
    "\047\010\045\011\044\012\043\013\040\014\037\015\035" +
    "\016\033\017\031\001\001\000\002\001\001\000\004\022" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\070\007\047\010\045\011\044\012\043\013\040\014" +
    "\037\015\035\016\033\017\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\073\010\045\011\044\012" +
    "\043\013\040\014\037\015\035\016\033\017\031\001\001" +
    "\000\002\001\001\000\020\011\124\012\043\013\040\014" +
    "\037\015\035\016\033\017\031\001\001\000\020\011\123" +
    "\012\043\013\040\014\037\015\035\016\033\017\031\001" +
    "\001\000\016\012\122\013\040\014\037\015\035\016\033" +
    "\017\031\001\001\000\002\001\001\000\020\011\117\012" +
    "\043\013\040\014\037\015\035\016\033\017\031\001\001" +
    "\000\020\011\116\012\043\013\040\014\037\015\035\016" +
    "\033\017\031\001\001\000\016\012\105\013\040\014\037" +
    "\015\035\016\033\017\031\001\001\000\020\011\104\012" +
    "\043\013\040\014\037\015\035\016\033\017\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\013\115\014" +
    "\037\015\035\016\033\017\031\001\001\000\014\013\114" +
    "\014\037\015\035\016\033\017\031\001\001\000\014\013" +
    "\111\014\037\015\035\016\033\017\031\001\001\000\002" +
    "\001\001\000\012\014\113\015\035\016\033\017\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\121\012" +
    "\043\013\040\014\037\015\035\016\033\017\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\130\003\016\035\126\042\131" +
    "\001\001\000\012\002\130\003\016\035\126\042\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\141\007\047\010\045\011\044" +
    "\012\043\013\040\014\037\015\035\016\033\017\031\024" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\143\007\047\010\045\011\044\012" +
    "\043\013\040\014\037\015\035\016\033\017\031\023\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\143\007\047\010\045\011\044\012\043" +
    "\013\040\014\037\015\035\016\033\017\031\023\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\156\001\001\000\026\006\154\007\047\010" +
    "\045\011\044\012\043\013\040\014\037\015\035\016\033" +
    "\017\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\162\003\016" +
    "\025\163\026\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\002\005" +
    "\003\016\006\051\007\047\010\045\011\044\012\043\013" +
    "\040\014\037\015\035\016\033\017\031\030\046\031\023" +
    "\032\034\033\032\034\012\035\003\036\007\037\050\040" +
    "\042\041\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\172\001\001\000\006\002\173\003\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\175" +
    "\001\001\000\002\001\001\000\026\006\177\007\047\010" +
    "\045\011\044\012\043\013\040\014\037\015\035\016\033" +
    "\017\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\002\005\003\016\006\051\007\047" +
    "\010\045\011\044\012\043\013\040\014\037\015\035\016" +
    "\033\017\031\030\046\031\023\032\034\033\032\034\012" +
    "\035\003\036\007\037\050\040\042\041\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\061\007\047" +
    "\010\045\011\044\012\043\013\040\014\037\015\035\016" +
    "\033\017\031\020\206\021\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\220\044\217" +
    "\045\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\043\220\044\217\045\227\001\001\000\002\001\001" +
    "\000\026\006\222\007\047\010\045\011\044\012\043\013" +
    "\040\014\037\015\035\016\033\017\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\002\005\003\016\006" +
    "\051\007\047\010\045\011\044\012\043\013\040\014\037" +
    "\015\035\016\033\017\031\030\046\031\023\032\034\033" +
    "\032\034\012\035\003\036\007\037\050\040\042\041\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\002\005\003\016\006\051" +
    "\007\047\010\045\011\044\012\043\013\040\014\037\015" +
    "\035\016\033\017\031\030\046\031\023\032\034\033\032" +
    "\034\012\035\003\036\007\037\050\040\042\041\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\243" +
    "\007\047\010\045\011\044\012\043\013\040\014\037\015" +
    "\035\016\033\017\031\001\001\000\002\001\001\000\004" +
    "\005\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\006\250\007\047\010\045\011\044\012\043\013\040" +
    "\014\037\015\035\016\033\017\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\002\005" +
    "\003\016\006\051\007\047\010\045\011\044\012\043\013" +
    "\040\014\037\015\035\016\033\017\031\030\046\031\023" +
    "\032\034\033\032\034\012\035\003\036\007\037\050\040" +
    "\042\041\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\002\005\003\016\006\051\007" +
    "\047\010\045\011\044\012\043\013\040\014\037\015\035" +
    "\016\033\017\031\030\046\031\023\032\034\033\032\034" +
    "\012\035\003\036\007\037\050\040\042\041\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\162\003\016\025\270\026\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\002\005" +
    "\003\016\006\051\007\047\010\045\011\044\012\043\013" +
    "\040\014\037\015\035\016\033\017\031\030\046\031\023" +
    "\032\034\033\032\034\012\035\003\036\007\037\050\040" +
    "\042\041\273\001\001\000\002\001\001\000\026\006\275" +
    "\007\047\010\045\011\044\012\043\013\040\014\037\015" +
    "\035\016\033\017\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\141\007\047\010\045\011\044\012\043" +
    "\013\040\014\037\015\035\016\033\017\031\024\303\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private AS as = new AS();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= INST S 
            {
              List<I> RESULT =null;
		I inst = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<I> lista_inst = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista_inst.add(0,inst); RESULT = lista_inst;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		List<I> start_val = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= 
            {
              List<I> RESULT =null;
		RESULT= new ArrayList<I>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E0 ::= E1 OR E0 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.or(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E0 ::= E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E1 ::= E2 AND E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.and(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E1 ::= E2 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E2 ::= E3 NOT IGUAL E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.notEqual(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E2 ::= E3 GT E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.greaterThan(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E2 ::= E3 LT E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.lessThan(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E2 ::= E3 LE E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.lessEqual(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E2 ::= E3 GE E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.greaterEqual(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E2 ::= E3 EQUAL E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.equal(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E2 ::= E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E3 ::= E3 MAS E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.suma(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E3 ::= E3 MENOS E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.resta(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E3 ::= E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E4 ::= E4 POR E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.mul(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E4 ::= E4 DIV E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.div(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E4 ::= E4 MOD E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mod(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E4 ::= E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E5 ::= E5 ELEV E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.elev(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E5 ::= E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E6 ::= NOT E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.not(op1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E6 ::= E7 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E7 ::= E7 CA E0 CC 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT=as.squareBracket(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E7 ::= E7 PUNTO E9 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.dot(op1, op2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E7 ::= PUNTERO E9 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.dollar(op1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E7 ::= NEW TIPO 
            {
              E RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.nnew(tipo);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E7 ::= E8 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E8 ::= MENOS E9 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.menos(op1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E8 ::= E9 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E9 ::= ENT 
            {
              E RESULT =null;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.num(op1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E9 ::= IDEN 
            {
              E RESULT =null;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=as.iden(op1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E9 ::= PA E0 PC 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E9 ::= TRUE 
            {
              E RESULT =null;
		RESULT=as.basicTrue();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E9 ::= FALSE 
            {
              E RESULT =null;
		RESULT=as.basicFalse();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E9 ::= IDEN PA LIST_ARG PC 
            {
              E RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> args = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT=as.llamadaFuncion(id,args);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LIST_ARG ::= 
            {
              List<E> RESULT =null;
		RESULT=new ArrayList<E>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_ARG",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LIST_ARG ::= CON_ARG 
            {
              List<E> RESULT =null;
		List<E> op1 = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_ARG",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CON_ARG ::= E0 ARG 
            {
              List<E> RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<E> op2 = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		op2.add(0, op1); RESULT=op2;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CON_ARG",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARG ::= COMA E0 ARG 
            {
              List<E> RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<E> op2 = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		op2.add(0, op1); RESULT=op2;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARG",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARG ::= 
            {
              List<E> RESULT =null;
		RESULT=new ArrayList<E>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARG",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= INST_IF 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= INST_WHILE 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= INST_SWITCH 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INST ::= INST_ASIG 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INST ::= INST_DECL 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INST ::= INST_STRUCT 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INST ::= INST_DECL_FUN 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INST ::= INST_CALL_PROC 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INST_IF ::= IF PA E0 PC THEN LA S LC 
            {
              I RESULT =null;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instIf(condicion, cuerpo, null);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INST_IF ::= IF PA E0 PC THEN LA S LC ELSE LA S LC 
            {
              I RESULT =null;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		List<I> cuerpo_if = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<I> cuerpo_else = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instIf(condicion, cuerpo_if, cuerpo_else);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INST_WHILE ::= WHILE PA E0 PC DO LA S LC 
            {
              I RESULT =null;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instWhile(condicion, cuerpo);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INST_SWITCH ::= SWITCH PA IDEN PC LA LIST_CASE LC 
            {
              I RESULT =null;
		String condicion = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Pair<E,List<I>>> list_cases = (List<Pair<E,List<I>>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instSwitch(as.iden(condicion), list_cases);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_SWITCH",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LIST_CASE ::= 
            {
              List<Pair<E,List<I>>> RESULT =null;
		List<Pair<E, List<I>>> cases = new ArrayList<Pair<E, List<I>>>(); RESULT = cases;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_CASE",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LIST_CASE ::= SINGLE_CASE LIST_CASE 
            {
              List<Pair<E,List<I>>> RESULT =null;
		Pair<E,List<I>> single_case = (Pair<E,List<I>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Pair<E,List<I>>> cases = (List<Pair<E,List<I>>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		cases.add(0, single_case); RESULT = cases;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_CASE",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LIST_CASE ::= SINGLE_DEFAULT 
            {
              List<Pair<E,List<I>>> RESULT =null;
		Pair<E,List<I>> defa = (Pair<E,List<I>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		List<Pair<E, List<I>>> cases = new ArrayList<Pair<E, List<I>>>(); cases.add(defa); RESULT = cases;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_CASE",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SINGLE_CASE ::= CASE E0 THEN LA S LC 
            {
              Pair<E,List<I>> RESULT =null;
		E selector = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new Pair<E, List<I>>(selector, cuerpo);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SINGLE_CASE",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SINGLE_DEFAULT ::= DEFAULT LA S LC 
            {
              Pair<E,List<I>> RESULT =null;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new Pair<E, List<I>>(null, cuerpo);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SINGLE_DEFAULT",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INST_ASIG ::= E0 IGUAL E0 PCOMA 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valor = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instAsignacion(id, valor);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INST_DECL ::= TIPO IDEN PCOMA 
            {
              I RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instDeclaracion(false, tipo, as.iden(id), null);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INST_DECL ::= TIPO IDEN IGUAL INIT_LIST_VAL PCOMA 
            {
              I RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> valor = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instDeclaracion(false, tipo, as.iden(id), valor);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INST_DECL ::= CONST TIPO IDEN IGUAL INIT_LIST_VAL PCOMA 
            {
              I RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> valor = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instDeclaracion(true, tipo, as.iden(id), valor);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INIT_LIST_VAL ::= E0 
            {
              List<E> RESULT =null;
		E val = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<E> list = new ArrayList<E>(); list.add(0, val); RESULT = list; RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INIT_LIST_VAL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INIT_LIST_VAL ::= LA LIST_VAL LC 
            {
              List<E> RESULT =null;
		List<E> list = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INIT_LIST_VAL",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LIST_VAL ::= E0 COMA LIST_VAL 
            {
              List<E> RESULT =null;
		E val = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<E> list = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LIST_VAL ::= E0 
            {
              List<E> RESULT =null;
		E val = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		List<E> list = new ArrayList<E>(); list.add(0, val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= TIPO_BASICO 
            {
              Tipo RESULT =null;
		Tipo tipoBasico = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = tipoBasico;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO_BASICO ::= INT 
            {
              Tipo RESULT =null;
		Object tipoBasico = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoInt();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPO_BASICO ::= BOOLEAN 
            {
              Tipo RESULT =null;
		Object tipoBasico = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoBoolean();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPO_BASICO ::= IDEN 
            {
              Tipo RESULT =null;
		String tipoPropio = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoStruct(tipoPropio);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= TIPO_BASICO TIPO_PUNTERO 
            {
              Tipo RESULT =null;
		Tipo tipoBasico = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Tipo tipoPuntero = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		TipoPuntero t = (TipoPuntero) tipoPuntero;
  while(t.getTipoApuntado() != null) t = (TipoPuntero) t.getTipoApuntado();
  t.setTipoApuntado(tipoBasico);
  RESULT = tipoPuntero;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPO_PUNTERO ::= PUNTERO 
            {
              Tipo RESULT =null;
		RESULT = new TipoPuntero(null);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_PUNTERO",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPO_PUNTERO ::= PUNTERO TIPO_PUNTERO 
            {
              Tipo RESULT =null;
		Tipo tipoPuntero = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoPuntero(tipoPuntero);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_PUNTERO",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= TIPO_BASICO TIPO_ARRAY 
            {
              Tipo RESULT =null;
		Tipo tipoBasico = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Tipo tipoArray = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		TipoArray t = (TipoArray) tipoArray;
  while(t.getTipoBase() != null) t = (TipoArray) t.getTipoBase();
  t.setTipoBase(tipoBasico);
  RESULT = tipoArray;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO_ARRAY ::= LA E0 LC 
            {
              Tipo RESULT =null;
		E dimension = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new TipoArray(null, dimension);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO_ARRAY ::= LA E0 LC TIPO_ARRAY 
            {
              Tipo RESULT =null;
		E dimension = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Tipo tipoArray = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new TipoArray(tipoArray, dimension);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INST_STRUCT ::= STRUCT LA LIST_DECL LC IDEN PCOMA 
            {
              I RESULT =null;
		List<I> lista = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instStruct(as.iden(nombre), lista);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_STRUCT",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LIST_DECL ::= INST_DECL LIST_DECL 
            {
              List<I> RESULT =null;
		I decl = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<I> lista = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(0, decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_DECL",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LIST_DECL ::= 
            {
              List<I> RESULT =null;
		RESULT = new ArrayList<I>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_DECL",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INST_DECL_FUN ::= TIPO IDEN PA LIST_TIPO_ARG PC LA S RETURN E0 PCOMA LC 
            {
              I RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		List<Pair<Tipo,E>> args = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E ret = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = as.instDeclFun(tipo, as.iden(id), args, cuerpo, ret);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INST_DECL_FUN ::= PROC IDEN PA LIST_TIPO_ARG PC LA S LC 
            {
              I RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		List<Pair<Tipo,E>> args = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.instDeclFun(null, as.iden(id), args, cuerpo, null);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LIST_TIPO_ARG ::= 
            {
              List<Pair<Tipo,E>> RESULT =null;
		RESULT=new ArrayList<Pair<Tipo, E>>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_TIPO_ARG",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LIST_TIPO_ARG ::= CON_TIPO_ARG 
            {
              List<Pair<Tipo,E>> RESULT =null;
		List<Pair<Tipo,E>> args = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT=args;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_TIPO_ARG",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CON_TIPO_ARG ::= TIPO IDEN TIPO_ARG 
            {
              List<Pair<Tipo,E>> RESULT =null;
		Tipo tipoArgumento = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String nombreArgumento = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Pair<Tipo,E>> args = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		args.add(0, new Pair<Tipo, E>(tipoArgumento, as.iden(nombreArgumento))); RESULT=args;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CON_TIPO_ARG",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPO_ARG ::= COMA TIPO IDEN TIPO_ARG 
            {
              List<Pair<Tipo,E>> RESULT =null;
		Tipo tipoArgumento = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String nombreArgumento = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Pair<Tipo,E>> args = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		args.add(0, new Pair<Tipo, E>(tipoArgumento, as.iden(nombreArgumento))); RESULT=args;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARG",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO_ARG ::= 
            {
              List<Pair<Tipo,E>> RESULT =null;
		RESULT=new ArrayList<Pair<Tipo, E>>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARG",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INST_CALL_PROC ::= IDEN PA LIST_ARG PC PCOMA 
            {
              I RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<E> args = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = as.instCallProc(as.iden(id), args);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL_PROC",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

